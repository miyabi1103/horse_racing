import json
from pathlib import Path


import re

import pandas as pd
import numpy as np
import ast
COMMON_DATA_DIR = Path("..", "..", "..","common", "data")
RAWDF_DIR = COMMON_DATA_DIR / "rawdf"
MAPPING_DIR = COMMON_DATA_DIR / "mapping"
POPULATION_DIR = Path("..","..", "data", "00_population")
OUTPUT_DIR = Path("..", "..","data", "01_preprocessed")
OUTPUT_DIR.mkdir(exist_ok=True, parents=True)


POPULATION_DIR_NEW = COMMON_DATA_DIR / "prediction_population"

# カテゴリ変数を数値に変換するためのマッピング
with open(MAPPING_DIR / "sex.json", "r") as f:
    sex_mapping = json.load(f)
with open(MAPPING_DIR / "race_type.json", "r") as f:
    race_type_mapping = json.load(f)
with open(MAPPING_DIR / "around.json", "r") as f:
    around_mapping = json.load(f)
with open(MAPPING_DIR / "weather.json", "r") as f:
    weather_mapping = json.load(f)
with open(MAPPING_DIR / "ground_state.json", "r") as f:
    ground_state_mapping = json.load(f)
with open(MAPPING_DIR / "race_class.json", "r") as f:
    race_class_mapping = json.load(f)
with open(MAPPING_DIR / "place.json", "r") as f:
    place_mapping = json.load(f)


# 特徴量に使うレースリザルトを加工してアウトプットする関数
def process_results(
    population_dir: Path = POPULATION_DIR,
    populaton_filename: str = "population.csv",
    input_dir: Path = RAWDF_DIR,
    output_dir: Path = OUTPUT_DIR,
    input_filename: str = "results.csv",
    output_filename: str = "results.csv",
    sex_mapping: dict = sex_mapping,
) -> pd.DataFrame:
    """
    未加工のレース結果テーブルをinput_dirから読み込んで加工し、
    output_dirに保存する関数。
    """
    population = pd.read_csv(population_dir / populaton_filename, sep="\t")

    # df = pd.read_csv(input_dir / input_filename, sep="\t").query(
    #     "race_id in @population['race_id']"
    # )
    # `race_id`のリストを作成
    population_race_ids = population['race_id'].tolist()
    
    # クエリでリストを直接使用
    df = pd.read_csv(input_dir / input_filename, sep="\t").query(
        "race_id in @population_race_ids"
    )


    df["rank"] = pd.to_numeric(df["着順"], errors="coerce")
    df.dropna(subset=["rank"], inplace=True)
    df["rank"] = df["rank"].astype(int)
    
    # 時間を秒に変換
    df["time"] = pd.to_datetime(df["タイム"], format="%M:%S.%f", errors="coerce")
    df.dropna(subset=["time"], inplace=True)
    df["time"] = (
        df["time"].dt.minute * 60
        + df["time"].dt.second
        + df["time"].dt.microsecond / 1000000
    )
    df["time"] = df["time"].astype(float)

    
    # その他の列を整形
    df["nobori"] = df["上り"].astype(float)
    df["umaban"] = df["馬番"].astype(int)
    df["umaban_odd"] = (df["umaban"] % 2 == 1).astype(int)
    #1（奇数）または 0（偶数）
    df["tansho_odds"] = df["単勝"].astype(float)
    df["popularity"] = df["人気"].astype(int)
    df["impost"] = df["斤量"].astype(float)
    df["wakuban"] = df["枠番"].astype(int)
    df["sex"] = df["性齢"].str[0].map(sex_mapping)
    df["age"] = df["性齢"].str[1:].astype(int)
    df["weight"] = df["馬体重"].str.extract(r"(\d+)").astype(int)
    df["weight_diff"] = df["馬体重"].str.extract(r"\((.+)\)").astype(int)
    df["n_horses"] = df.groupby("race_id")["race_id"].transform("count")
    
    # コーナー通過順を分割して列を作成
    corner_cols = df['通過'].str.split('-', expand=True)
    corner_cols.columns = [f'corner_{i+1}' for i in range(corner_cols.shape[1])]
    # オブジェクト型のデータを整数型に変換する
    corner_cols = corner_cols.apply(pd.to_numeric, errors='coerce').astype('Int64')  
    # nullable int型を指定
    

    # # time列の相対化
    # tmp_df = df.groupby("race_id")["time"]
    # df["time_relative"] = ((df["time"] - tmp_df.transform("mean")) / tmp_df.transform("std"))
    # tmp_df = df.groupby("race_id")["rank"]
    # df["rank_relative"] = ((df["rank"] - tmp_df.transform("mean")) / tmp_df.transform("std"))

    
    # 元のデータフレームと結合
    result_df = pd.concat([df, corner_cols], axis=1)
    # NoneをNaNに置き換え
    result_df = result_df.where(pd.notnull(result_df), np.nan)
    df = result_df

    # rank / n_horses の特徴量を作成（欠損値を含む行はNaNに設定）
    df["rank_per_horse"] = df["rank"].where(df["rank"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    
    # corner_1 / n_horses の特徴量を作成（欠損値を含む行はNaNに設定）
    df["corner_1_per_horse"] = df["corner_1"].where(df["corner_1"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    
    df["corner_2_per_horse"] = df["corner_2"].where(df["corner_2"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    df["corner_3_per_horse"] = df["corner_3"].where(df["corner_3"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    df["corner_4_per_horse"] = df["corner_4"].where(df["corner_4"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    # NoneをNaNに置き換え
    df = df.where(pd.notnull(df), np.nan)   
    result_df = df
    
    # for col in corner_cols.columns:
    #     # ここでは result_df を使う
    #     tmp_df = result_df.groupby("race_id")[col]
    #     result_df[f"{col}_relative"] = ((result_df[col] - tmp_df.transform("mean")) / tmp_df.transform("std"))
    # result_df = result_df.apply(lambda col: col.apply(lambda x: np.nan if pd.isna(x) else x))


    """
    レース平均年齢、中央値、平均年齢切り捨て
    """

    # 1. race_idごとの年齢の平均、中央値、平均（小数点以下切り捨て）を計算
    race_age_stats = result_df.groupby('race_id').agg(
        mean_age=('age', 'mean'),
        median_age=('age', 'median'),
        mean_age_kirisute=('age', lambda x: int(x.mean()))  # 小数点以下切り捨て
    ).reset_index()
    
    # 2. result_dfに統合（merge）し、_xや_yを回避する
    result_df = result_df.merge(
        race_age_stats, 
        on='race_id', 
        how='left', 
        suffixes=('', '_drop')  # _drop を付けることで重複を回避
    )
    
    # 不要な列を削除（この場合は、"age_drop" などの列があれば削除する）
    result_df = result_df.loc[:, ~result_df.columns.str.endswith('_drop')]


    result_df["impost_percent"] = result_df["impost"] / result_df["weight"]
    # データが着順に並んでいることによるリーク防止のため、各レースを馬番順にソートする
    result_df = result_df.sort_values(["race_id", "umaban"])

    # 使用する列を選択
    result_df = result_df[
        [
            "race_id",
            "horse_id",
            "jockey_id",
            "trainer_id",
            "owner_id",
            "rank", 
            "rank_per_horse",
            "time",
            "nobori",
            "umaban",
            "wakuban",
            "tansho_odds",
            "popularity",
            "impost",
            "sex",
            "age",
            "weight",
            "weight_diff",
            "impost_percent",
            "n_horses",
            "corner_1_per_horse",
            "corner_2_per_horse",
            "corner_3_per_horse",
            "corner_4_per_horse",
            "mean_age",
            "median_age",
            "mean_age_kirisute",
            "umaban_odd",
            # "time_relative",  # timeの相対化列
            # "rank_relative",  # rankの相対化列
        ]  + list(corner_cols.columns)  # コーナー通過列はここで自動的に含まれます
    # + [f"{col}_relative" for col in corner_cols.columns] 
    ]

    # 結果を出力
    result_df.to_csv(output_dir / output_filename, sep="\t", index=False)
    
    return result_df




def process_race_info(
    population_dir: Path = POPULATION_DIR,
    populaton_filename: str = "population.csv",
    input_dir: Path = RAWDF_DIR,
    output_dir: Path = OUTPUT_DIR,
    input_filename: str = "race_info.csv",
    output_filename: str = "race_info.csv",
    race_type_mapping: dict = race_type_mapping,
    around_mapping: dict = around_mapping,
    weather_mapping: dict = weather_mapping,
    ground_state_mapping: dict = ground_state_mapping,
    race_class_mapping: dict = race_class_mapping,
) -> pd.DataFrame:
    """
    未加工のレース情報テーブルをinput_dirから読み込んで加工し、
    output_dirに保存する関数。
    """
    population = pd.read_csv(population_dir / populaton_filename, sep="\t")
    population_race_ids = population['race_id'].tolist()
    
    # クエリでリストを直接使用
    df = pd.read_csv(input_dir / input_filename, sep="\t").query(
        "race_id in @population_race_ids"
    )
    
    # df = pd.read_csv(input_dir / input_filename, sep="\t").query(
    #     "race_id in @population['race_id']"
    # )
    
    # evalで文字列型の列をリスト型に変換し、一時的な列を作成
    df["tmp"] = df["info1"].map(lambda x: eval(x)[0])

    # info1 列からコースの長さを取り出して tmp 列を作成
    df["tmp2"] = df["info1"].map(lambda x: ast.literal_eval(x))
    
    # tmp 列から距離の部分を抽出
    def extract_course_len(info_list):
        for item in info_list:
            match = re.search(r"(\d+)m", item)
            if match:
                return match.group(1)  # マッチした数字部分を返す
        return None  # 該当がなければ None を返す
    
    # コース長を新しい列に追加
    df["course_len_1"] = df["tmp2"].apply(extract_course_len)
    df["course_len_2"] = df["tmp2"].map(lambda x: x[1]).str.extract(r"(\d+)")
    df["combined_course_len"] = df["course_len_1"].fillna(df["course_len_2"])
  

    # ダートor芝or障害
    df["race_type"] = df["tmp"].str[0].map(race_type_mapping)

    # 右or左or直線
    df["around"] = df["tmp"].str[1].map(around_mapping)
    df["course_len"] = df["course_len_1"].fillna(df["course_len_2"])
    # df["course_len"] = df["tmp"].str.extract(r"(\d+)")
    # df["course_len"] = df["tmp"].str.extract(r"(\d+)(?=m)")
    # 条件に基づいて course_type を設定
    df["course_len_type"] = df["tmp"].apply(
        lambda x: 1 if "内" in str(x[2:3]) else 2 if "外" in str(x[2:3]) else 1
    )
    df["weather"] = df["info1"].str.extract(r"天候:(\w+)")[0].map(weather_mapping)
    df["ground_state"] = (
        df["info1"].str.extract(r"(芝|ダート|障害):(\w+)")[1].map(ground_state_mapping)
    )
    df["date"] = pd.to_datetime(
        df["info2"].map(lambda x: eval(x)[0]), format="%Y年%m月%d日"
    )
    regex_race_class = "|".join(race_class_mapping)
    df["race_class"] = (
        df["title"]
        .str.extract(rf"({regex_race_class})")
        # タイトルからレース階級情報が取れない場合はinfo2から取得
        .fillna(df["info2"].str.extract(rf"({regex_race_class})"))[0]
        .map(race_class_mapping)
    )
    df["place"] = df["race_id"].astype(str).str[4:6].astype(int)
    df.dropna(subset=["place"], inplace=True)
    

    df["course_type"] = df["place"].astype(str)+ df["race_type"].astype(str) + df["course_len"].astype(str) + df["course_len_type"].astype(str) 

    # 年、月、日をそれぞれ抽出
    df["date_year"] = df["date"].dt.year
    df["date_month"] = df["date"].dt.month
    df["date_day"] = df["date"].dt.day

    df["date_year"] = df["date_year"] - 1
    # 各月の累積日数を計算する関数
    def get_cumulative_days(month):
        # 各月の累積日数（平年を仮定）
        cumulative_days = {
            1: 0,               # 1月
            2: 31,              # 2月
            3: 31 + 28,         # 3月
            4: 31 + 28 + 31,    # 4月
            5: 31 + 28 + 31 + 30,  # 5月
            6: 31 + 28 + 31 + 30 + 31,  # 6月
            7: 31 + 28 + 31 + 30 + 31 + 30,  # 7月
            8: 31 + 28 + 31 + 30 + 31 + 30 + 31,  # 8月
            9: 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31,  # 9月
            10: 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30,  # 10月
            11: 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31,  # 11月
            12: 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30  # 12月
        }
        return cumulative_days.get(month, 0)
    
    # 月の累積日数を計算
    df["month_cumulative_days"] = df["date_month"].apply(get_cumulative_days)
    
    # 年×365 + 月の累積日数 + 日を計算
    df["custom_date_value"] = df["date_year"] * 365 + df["month_cumulative_days"] + df["date_day"]
    
    # 必要に応じて中間列を削除
    df = df.drop(columns=["month_cumulative_days"])  # 中間列が不要な場合
    
        
    df["race_day_count"] = df['race_id'].astype(str).str[-2:]
    
    
    df["race_date_day_count"] = df["custom_date_value"].astype(str) + df["race_day_count"]
    
    
    
    df["race_day_count"].astype(int)
    df["race_date_day_count"].astype(int)


    # 月を抽出して開催シーズンを判定
    def determine_season(month):
        if 6 <= month <= 8:
            return "2" #"夏開催"
        elif month == 12 or 1 <= month <= 2:
            return "4" #"冬開催"
        elif 3 <= month <= 5:
            return "1" #"春開催"
        elif 9 <= month <= 11:
            return "3" #"秋開催"    
    
    
    df["race_type"] = df["race_type"].astype(str)
    
    df["season"] = df["date"].dt.month.map(determine_season)
    
    # 開催地とシーズンを組み合わせた新しいカテゴリを作成
    df["place_season"] = df["place"].astype(str) + df["season"]
    #芝/ダートを紐付け、ダ0芝1障2
    df["place_season_type"] = df["place_season"] + df["race_type"]
    
    # 月を抽出して開催シーズンを判定
    def determine_season_2(month):
        if 4 <= month <= 6:
            return "2" #"夏開催"
        elif 1 <= month <= 3:
            return "1" #"冬開催"
        elif 7 <= month <= 9:
            return "3" #"春開催"
        elif 10 <= month <= 12:
            return "4" #"秋開催"    
    df["season_level"] = df["date"].dt.month.map(determine_season_2)
    df["season_level"] = df["season_level"].astype(int)




    # 開催レースが何回かを表示
    df["kaisai_race"] = df['race_id'].astype(str).str[-2:]
    #芝/ダートを紐付け、ダ0芝1障2
    df["kaisai_race_type"] = df["kaisai_race"] + df["race_type"]
    
    # 何日目かを表示
    df["day"] = df['race_id'].astype(str).str[-4:-2]
    #芝/ダートを紐付け、ダ0芝1障2
    df["day_type"] = df["day"] + df["race_type"]
    
    # 開催回数を表示
    df["kaisai_count"] = df['race_id'].astype(str).str[-6:-4]
    #芝/ダートを紐付け、ダ0芝1障2
    df["kaisai_count_type"] = df["kaisai_count"] + df["race_type"]
    
    
    # 開催_季節_開催回数を表示
    df["place_season_day_type"] = df["place_season"] + df["day_type"]
    
    
    # condition
    df['day_condition'] = np.where(df['day'].astype(int) < 4, 1, 2)
    df['day_condition'] = df['day_condition'].astype(str)
    
    # 開催_季節_開催コンディション_レースタイプを表示
    df["place_season_condition_type"] = df["place_season"] + df['day_condition'] + df["race_type"]
    
    

    # 月を抽出して開催シーズンを判定
    def determine_season_turf(month):
        if 6 <= month <= 8:
            return "1" #"夏開催"
        elif month == 12 or 1 <= month <= 2:
            return "4" #"冬開催"
        elif 3 <= month <= 5:
            return "1" #"春開催"
        elif 9 <= month <= 11:
            return "2" #"秋開催"       
    
    df["season_turf"] = df["date"].dt.month.map(determine_season_turf)
    df["day"] = df["day"].astype(str)

    df["day_season_turf"] =  df["day"] + df["season_turf"]
    df["day_season_turf"] =  df["day_season_turf"].astype(int)
    df["day"] = df["day"].astype(int)


    df["season_turf"] = df["season_turf"].astype(float)
    #umaban

    df["season_turf_condition"] = np.where(
        df["season_turf"] == 1, df["day"],
        np.where(
            df["season_turf"] == 2, (df["day"] + 1.5) * 1.5,
            np.where(
                df["season_turf"] == 3, df["day"] + 3,
                np.where(
                    df["season_turf"] == 4, df["day"] + 4,
                    df["day"]  # それ以外のとき NaN
                )
            )
        )
    )
    df["season_turf_condition"] = df["season_turf_condition"].fillna(7)

    # コース別の馬場レベルを対応させる
    """
    オール野芝 ▶︎最も軽い芝で、速い時計が出やすい
    軽い芝 ▶︎時計面では野芝に劣るものの、こちらも速い時計が出やすい
    オーバーシード ▶︎ケースバイケース
    重い芝 ▶︎馬場が重く、時計もかかりやすい
    非常に重い芝 ▶︎JRA10場の中で最も重く、時計もかかりやすい
    
    オール野芝5	 '10111','10211',   小倉(夏)	'6311',中山(秋)	 '9311',   阪神(秋)	 '4111',  '4211',  '4311', '4411', 
    新潟	 '7311',   中京(秋)		
    軽い芝4	 '5111', '5211',  '5311',  '5411', 
     東京	 '8111',  '8211', '8311',   京都	'4121','4221','4321', '4421',  新潟	'10121','10221','小倉(夏)	 '6321', ' 中山(秋)	'9321', 阪神(秋)	'7321', 中京(秋)
    オーバーシード3	'5121','5221','5321','5421',  東京	'8121','8221', '8321',京都	 '9111',  '9211', '9411', 阪神	 '3111', '3211',  '3311', '3411', 
    福島	'7111',  '7211',  '7411', 中京	'6111',  '6211',  '6411',  中山	'10311','10411'小倉(冬)
    重い芝2	'9121','9221','9421',阪神	'6121','6221','6421',中山	'7121','7221','7421',中京	'3121', '3221','3321', '3421',  福島	'8411', '8421'京都(冬)	 '10321', '10421'小倉(冬)	
    非常に重い芝1	 '2111', '2121', '2211', '2221', '2311', '2321', '2411', '2421',  
    函館	'1111', '1121', '1211', '1221', '1311', '1321', '1411', '1421',  札幌					
    
    令和版ダートコースの馬場レベル表
    軽いダート-1	 '5110', '5120', '5210', '5220', '5310', '5320', '5410', '5420',東京	 '8110', '8120', '8210', '8220', '8310', '8320', '8410', '8420', 京都				
    重いダート-2	'1110', '1120', '1210', '1220', '1310', '1320', '1410', '1420', 札幌	'2110', '2120', '2210', '2220', '2310', '2320', '2410', '2420',函館	   '10110', '10120', '10210', '10220', '10310', '10320', '10410', '10420'小倉	'3110', '3120', '3210', '3220', '3310', '3320', '3410', '3420',福島	'4110', '4120', '4210', '4220', '4310', '4320', '4410', '4420',新潟	 '9110', '9120', '9210', '9220', '9310', '9320', '9410', '9420', 阪神
    非常に重いダート-3	'7110', '7120', '7210', '7220', '7310', '7320', '7410', '7420', 中京	'6110', '6120', '6210', '6220', '6310', '6320', '6410', '6420', 中山				
    障害レースはその他0
    """
    
    
    conversion_map = {
        '10111': 5, '10211': 5, '6311': 5, '9311': 5, '4111': 5, '4211': 5, '4311': 5, '4411': 5, '7311': 5,
        '5111': 4, '5211': 4, '5311': 4, '5411': 4, '8111': 4, '8211': 4, '8311': 4, '4121': 4, '4221': 4, '4321': 4, '4421': 4,
        '10121': 4, '10221': 4, '6321': 4, '9321': 4, '7321': 4,
        '5121': 3, '5221': 3, '5321': 3, '5421': 3, '8121': 3, '8221': 3, '8321': 3, '9111': 3, '9211': 3, '9411': 3,
        '3111': 3, '3211': 3, '3311': 3, '3411': 3, '7111': 3, '7211': 3, '7411': 3, '6111': 3, '6211': 3, '6411': 3,
        '10311': 3, '10411': 3,
        '9121': 2, '9221': 2, '9421': 2, '6121': 2, '6221': 2, '6421': 2, '7121': 2, '7221': 2, '7421': 2, '3121': 2, 
        '3221': 2, '3321': 2, '3421': 2, '8411': 2, '8421': 2, '10321': 2, '10421': 2,
        '2111': 1, '2121': 1, '2211': 1, '2221': 1, '2311': 1, '2321': 1, '2411': 1, '2421': 1,
        '1111': 1, '1121': 1, '1211': 1, '1221': 1, '1311': 1, '1321': 1, '1411': 1, '1421': 1,
        
        '5110': -1, '5120': -1, '5210': -1, '5220': -1, '5310': -1, '5320': -1, '5410': -2, '5420': -2,
        '8110': -1, '8120': -1, '8210': -1, '8220': -1, '8310': -1, '8320': -1, '8410': -2, '8420': -2,
        '1110': -2, '1120': -2, '1210': -2, '1220': -2, '1310': -2, '1320': -2, '1410': -3, '1420': -3,
        '2110': -2, '2120': -2, '2210': -2, '2220': -2, '2310': -2, '2320': -2, '2410': -3, '2420': -3,
        '10110': -2, '10120': -2, '10210': -2, '10220': -2, '10310': -2, '10320': -2, '10410': -3, '10420': -3,
        '3110': -2, '3120': -2, '3210': -2, '3220': -2, '3310': -2, '3320': -2, '3410': -3, '3420': -3,
        '4110': -2, '4120': -2, '4210': -2, '4220': -2, '4310': -2, '4320': -2, '4410': -3, '4420': -3,
        '9110': -2, '9120': -2, '9210': -2, '9220': -2, '9310': -2, '9320': -2, '9410': -3, '9420': -3,
        '7110': -3, '7120': -3, '7210': -3, '7220': -3, '7310': -3, '7320': -3, '7410': -4, '7420': -4,
        '6110': -3, '6120': -3, '6210': -3, '6220': -3, '6310': -3, '6320': -3, '6410': -4, '6420': -4
    }
    
    df['place_season_condition_type_categori'] = df['place_season_condition_type'].map(conversion_map).fillna(-10000).astype(int)
    df['place_season_condition_type_categori'] = df['place_season_condition_type_categori'].replace(-10000, np.nan)


    
    
    df["place"] = df["place"].astype(int)
    df["course_len"] = df["course_len"].astype(int)
    
    df["race_type"] = df["race_type"].astype(int)
    
    #芝のコース詳細データ
    classification_map = {
        9: {  # 阪神
            "内": [1200, 1400, 2000, 2200, 3000, 3200],
            "外": [1400, 1600, 1800, 2400, 2600],
        },
        8: {  # 京都
            "内": [1100, 1200],
            "外": [1800, 2200, 2400, 3000, 3200],
            "内外": [1400, 1600, 2000],
        },
        4: {  # 新潟
            "内": [1200, 1400, 2000, 2200, 2400],
            "外": [1400, 1600, 1800, 2000, 3000, 3200],
            "内外": [],
            "直線": [1000],
        },
        6: {  # 中山
            "内": [1800, 2000, 2500, 3600],
            "外": [1200, 1600, 2200, 2600, 4000],
            "内外": [3200],
        }
    }
    """
    阪神内
    1,200m、1,400m、2,000m
    2,200m、3,000m、3,200m
    
    阪神外
    1,400m、1,600m、1,800m
    2,400m、2,600m
    
    京都内
    1,100m(内)、1,200m(内)
    
    京都内・外
    1,400m(内・外)、1,600m(内・外)
    2,000m(内・外)
    
    京都外
    1,800m(外)
    2,200m(外)、2,400m(外)
    3,000m(外)、3,200m(外)
    
    新潟直線
    1,000m
    
    新潟内
    1,200m、1,400m
    2,000m、2,200m、2,400m
    
    新潟外
    1,400m、1,600m
    1,800m、2,000m、3,000m、3,200m
    
    中山内外
    3,200m（外・内）
    
    中山内
    1,800m（内）、2,000m（内）
    2,500m（内）、3,600m（内）
    
    中山外
    1,200m（外）、1,600m（外）
    2,200m（外）、2,600m（外）、4,000m（外）
    """
    # 修正された分類ロジック
    def classify_place_course(row):
        place = row["place"]
        course_len = row["course_len"]
        race_type = row["race_type"]  # 0: ダート, 1: 芝, 2: 障害
        
        # ダートまたは障害の場合は NaN を返す
        if race_type in [2]:
            return None
        if race_type in [0]:
            return place + 1000   
        place_map = classification_map.get(place, {})
        for category, distances in place_map.items():
            if course_len in distances:
                category_index = list(place_map.keys()).index(category) + 1
                return int(f"{place}{category_index:02d}")  # 整数で返す
        
        # 分類ルールに該当しない場合は競馬場データをそのまま返す
        return place
    df["place_course_category"] = df.apply(classify_place_course, axis=1)
    #-1を欠損値として扱いintに直す
    df["place_course_category"] = df["place_course_category"].fillna(-1).astype(int)
    
    
    """
    コース別タフ度（芝）
    軽い3	新潟	東京	京都外	阪神外
    中間2	京都内	小倉	福島	中京
    タフ1	阪神内	函館	中山	札幌
    """
    # コース別タフ度（芝）_変換ルール
    conversion_map = {
        401: 3, 402: 3, 404: 3, 5: 3, 802: 3, 902: 3,
        801: 2, 803: 2, 10: 2, 3: 2, 7: 2,
        901: 1, 2: 1, 6: 1, 601: 1, 602: 1, 1: 1
    }
    # 新しい列を追加
    df["place_course_tough"] = df["place_course_category"].map(conversion_map).fillna(-1).astype(int)
    
    """
    競馬場	直線/m	カーブ	ゴール前
    新潟直線	1000	nan	平坦
    新潟外	658.7	急	平坦
    東京	525.9	複合	緩坂
    阪神外	473.6	複合	急坂
    中京	412.5	スパ	急坂
    京都外	403.7	複合	平坦
    京都内・外	345	複合	平坦
    新潟内	358.7	急	平坦
    阪神内	356.5	複合	急坂
    京都内	328.4	複合	平坦
    中山内	310	小回	急坂
    中山外	310	複合	急坂
    中山内外	310	複合	急坂
    札幌	266.1	大回	平坦
    函館	262.1	小回	平坦
    福島	292	小スパ	平坦
    小倉	293	小スパ	平坦
    """
    
    # # 競馬場カテゴリと対応する直線、カーブ、ゴール前情報
    # conversion_map = {
    #     401: {"直線": 1000, "カーブ": "直線", "ゴール前": "平坦"},
    #     402: {"直線": 658.7, "カーブ": "急", "ゴール前": "平坦"},
    #     404: {"直線": 525.9, "カーブ": "複合", "ゴール前": "緩坂"},
    #     902: {"直線": 473.6, "カーブ": "複合", "ゴール前": "急坂"},
    #     801: {"直線": 412.5, "カーブ": "スパ", "ゴール前": "急坂"},
    #     802: {"直線": 403.7, "カーブ": "複合", "ゴール前": "平坦"},
    #     803: {"直線": 345, "カーブ": "複合", "ゴール前": "平坦"},
    #     901: {"直線": 358.7, "カーブ": "急", "ゴール前": "平坦"},
    #     601: {"直線": 310, "カーブ": "小回", "ゴール前": "急坂"},
    #     602: {"直線": 310, "カーブ": "複合", "ゴール前": "急坂"},
    #     603: {"直線": 310, "カーブ": "複合", "ゴール前": "急坂"},
    #     1: {"直線": 266.1, "カーブ": "大回", "ゴール前": "平坦"},
    #     2: {"直線": 262.1, "カーブ": "小回", "ゴール前": "平坦"},
    #     3: {"直線": 292, "カーブ": "小スパ", "ゴール前": "平坦"},
    #     10: {"直線": 293, "カーブ": "小スパ", "ゴール前": "平坦"}
    # }

    # # カーブとゴール前を数値に変換する辞書
    # curve_map = {
    #     "急": 1,
    #     "小回": 2,
    #     "小スパ": 3,
    #     "スパ": 4,
    #     "複合": 5,
    #     "直線": 0  # Noneのまま
    # }
    
    # goal_map = {
    #     "平坦": 1,        
    #     "緩坂": 2,
    #     "急坂": 3
    #     # None: None  # Noneのまま
    # }
    # {
    # "札幌": 1,
    # "函館": 2,
    # "福島": 3,
    # "新潟": 4,
    # "東京": 5,
    # "中山": 6,
    # "中京": 7,
    # "京都": 8,
    # "阪神": 9,
    # "小倉": 10
    #    
    # conversion_map = {
    #     404: {"直線": 1000, "カーブ": 4, "ゴール前": 1},
    #     402: {"直線": 658.7, "カーブ": 1, "ゴール前": 1},
    #     5: {"直線": 525.9, "カーブ": 5, "ゴール前": 2},
    #     902: {"直線": 473.6, "カーブ": 5, "ゴール前": 3},
    #     7: {"直線": 412.5, "カーブ": 4, "ゴール前": 3},
    #     802: {"直線": 403.7, "カーブ": 5, "ゴール前": 1},
    #     803: {"直線": 345, "カーブ": 5, "ゴール前": 1},
    #     401: {"直線": 358.7, "カーブ": 1, "ゴール前": 1},
    #     901: {"直線": 356.5, "カーブ": 5, "ゴール前": 3},    
    #     801: {"直線": 328.4, "カーブ": 5, "ゴール前": 1},    
    #     601: {"直線": 310, "カーブ": 2, "ゴール前": 3},
    #     602: {"直線": 310, "カーブ": 5, "ゴール前": 3},
    #     603: {"直線": 310, "カーブ": 5, "ゴール前": 3},
    #     1: {"直線": 266.1, "カーブ": 5, "ゴール前": 1},
    #     2: {"直線": 262.1, "カーブ": 2, "ゴール前": 1},
    #     3: {"直線": 292, "カーブ": 3, "ゴール前": 1},
    #     10: {"直線": 293, "カーブ": 3, "ゴール前": 1},
    #     1001: {"直線": 264.3, "カーブ": 5, "ゴール前": 1},
    #     1002: {"直線": 256.0, "カーブ": 2, "ゴール前": 1},
    #     1003: {"直線": 267.3, "カーブ": 3, "ゴール前": 1},
    #     1004: {"直線": 353.9, "カーブ": 1, "ゴール前": 1},
    #     1005: {"直線": 501.6, "カーブ": 5, "ゴール前": 2},
    #     1006: {"直線": 308.0, "カーブ": 2, "ゴール前": 3},
    #     1007: {"直線": 410.7, "カーブ": 4, "ゴール前": 3},
    #     1008: {"直線": 329.1, "カーブ": 5, "ゴール前": 1},
    #     1009: {"直線": 325.5, "カーブ": 5, "ゴール前": 3},
    #     1010: {"直線": 291.3, "カーブ": 3, "ゴール前": 1}
    # }

    # # データフレームに変換情報を適用する関数
    # def convert_course(row):
    #     place_code = row["place_course_category"]  # 競馬場の数値コード
    #     if place_code in conversion_map:
    #         # 直線、カーブ、ゴール前の情報を取得
    #         course_info = conversion_map[place_code]
    #         # 列名を変更
    #         return pd.Series({
    #             "goal_range": course_info["直線"], 
    #             "curve": course_info["カーブ"], 
    #             "goal_slope": course_info["ゴール前"]
    #         })
    #     else:
    #         return pd.Series({"goal_range": None, "curve": None, "goal_slope": None})
    
    # # 競馬場カテゴリに基づく変換を追加
    # df[['goal_range', 'curve', 'goal_slope']] = df.apply(convert_course, axis=1)
    
    # df["goal_range_100"] = df["goal_range"]/100
    
    
    """
    コーナータイプ
    緩やかで大きなカーブ:5
    小回:2
    普通:3
    膨らみ小回り:4
    膨らみ形状:5
    df["course_type"] 
    = df["place"].astype(str)+ df["race_type"].astype(str) + df["course_len"].astype(str) + df["course_len_type"].astype(str) 

    スタート位置、ダート1 芝2

    """
    df["course_len_type"] = df["course_len_type"].astype(int)
    
    df["course_type"] = df["course_type"].astype(int)

    conversion_map_course_type = {
        #ダート
        #札幌
        1010001:{"コーナー数": 2, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 284.00,"直線合計": 548, "コーナー合計m":452,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":147,"高低差":0.9,"幅":20.0,"最初坂":0.4,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":0.2},
        1010002:{"コーナー数": 2, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 284.00,"直線合計": 548, "コーナー合計m":452,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":147,"高低差":0.9,"幅":20.0,"最初坂":0.4,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":0.2},

        1017001:{"コーナー数": 4, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 240.00,"直線合計": 796, "コーナー合計m":904,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":0.5,"最終コーナー坂":0.2},
        1017002:{"コーナー数": 4, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 240.00,"直線合計": 796, "コーナー合計m":904,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":0.5,"最終コーナー坂":0.2},

        1024001:{"コーナー数": 6, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 180.00,"直線合計": 1044, "コーナー合計m":1356,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0.3,"向正面坂":0.5,"最初コーナー坂":0,"最終コーナー坂":0.2},
        1024002:{"コーナー数": 6, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 180.00,"直線合計": 1044, "コーナー合計m":1356,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0.3,"向正面坂":0.5,"最初コーナー坂":0,"最終コーナー坂":0.2},
        
        #函館
        2010001:{"コーナー数": 2, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 366.4,"直線合計": 626, "コーナー合計m":374,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},
        2010002:{"コーナー数": 2, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 366.4,"直線合計": 626, "コーナー合計m":374,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},

        2017001:{"コーナー数": 4, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 328.5,"直線合計": 952, "コーナー合計m":748,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":-1.5,"向正面坂":2,"最初コーナー坂":-1.4,"最終コーナー坂":-0.25},
        2017002:{"コーナー数": 4, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 328.5,"直線合計": 952, "コーナー合計m":748,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":-1.5,"向正面坂":2,"最初コーナー坂":-1.4,"最終コーナー坂":-0.25},

        2024001:{"コーナー数": 6, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 290.6,"直線合計": 1278, "コーナー合計m":1122,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},
        2024002:{"コーナー数": 6, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 290.6,"直線合計": 1278, "コーナー合計m":1122,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},

        #福島
        3010001:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 384.00,"直線合計": 780, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3010002:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 384.00,"直線合計": 780, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},

        3011501:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 2,    "最初直線": 484.00,"直線合計": 680, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3011502:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 2,    "最初直線": 484.00,"直線合計": 680, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},

        3017001:{"コーナー数": 4, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 338.5,"直線合計": 960, "コーナー合計m":740,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3017002:{"コーナー数": 4, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 338.5,"直線合計": 960, "コーナー合計m":740,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},

        3024001:{"コーナー数": 6, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 325.9,"直線合計": 1290, "コーナー合計m":1110,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3024002:{"コーナー数": 6, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 325.9,"直線合計": 1290, "コーナー合計m":1110,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},


        #新潟
        4012001:{"コーナー数": 2, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線": 524.9,"直線合計": 879, "コーナー合計m":321,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.5,"最終コーナー坂":0},
        4012002:{"コーナー数": 2, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線": 524.9,"直線合計": 879, "コーナー合計m":321,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.5,"最終コーナー坂":0},

        4018001:{"コーナー数": 4, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 388.7,"直線合計": 1157, "コーナー合計m":643,"コーナータイプ":1,"コーナーR12":104,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.5,"最終コーナー坂":0},
        4018002:{"コーナー数": 4, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 388.7,"直線合計": 1157, "コーナー合計m":643,"コーナータイプ":1,"コーナーR12":104,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.5,"最終コーナー坂":0},

        #東京
        5013001:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":341.9,"直線合計": 844, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0.9,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5013002:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":341.9,"直線合計": 844, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0.9,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        
        5014001:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":441.9,"直線合計": 944, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-0.6,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5014002:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":441.9,"直線合計": 944, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-0.6,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},

        5016001:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25, "スタート位置": 2,    "最初直線":641.9,"直線合計": 1144, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-1,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5016002:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 2,    "最初直線":641.9,"直線合計": 1144, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-1,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},

        5021001:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":236.1,"直線合計": 1188, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5021002:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":236.1,"直線合計": 1188, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},

        5024001:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":536.1,"直線合計": 1488, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":2.5,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5024002:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":536.1,"直線合計": 1488, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":2.5,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},


        #中山
        6012001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 2,    "最初直線":502.6,"直線合計": 811, "コーナー合計m":389,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.5,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},
        6012002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 2,    "最初直線":502.6,"直線合計": 811, "コーナー合計m":389,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.5,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},

        6018001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":375.0,"直線合計": 1022, "コーナー合計m":778,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":3.5,"向正面坂":-3.5,"最初コーナー坂":0.7,"最終コーナー坂":-0.1},
        6018002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":375.0,"直線合計": 1022, "コーナー合計m":778,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":3.5,"向正面坂":-3.5,"最初コーナー坂":0.7,"最終コーナー坂":-0.1},

        6024001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":209.6,"直線合計": 1233, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-1,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},
        6024002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":209.6,"直線合計": 1233, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-1,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},

        6025001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":309.6,"直線合計": 1333, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.3,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},
        6025002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":309.6,"直線合計": 1333, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.3,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},


        #中京       
        7012001:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":407.7,"直線合計": 818, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7012002:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":407.7,"直線合計": 818, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7014001:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2, "スタート位置": 2,    "最初直線":607.7,"直線合計": 1018, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7014002:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":607.7,"直線合計": 1018, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7018001:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2, "スタート位置": 1,    "最初直線":291.8,"直線合計": 1103, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.5,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},
        7018001:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":291.8,"直線合計": 1103, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.5,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},

        7019001:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":391.80,"直線合計": 1203, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":2,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},
        7019002:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2, "スタート位置": 1,    "最初直線":391.80,"直線合計": 1203, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":2,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},


        #京都
        8012001:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":409.6,"直線合計": 739, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":2.2,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},
        8012002:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":409.6,"直線合計": 739, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":2.2,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},

        8014001:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線":609.6,"直線合計": 939, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},
        8014002:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線":609.6,"直線合計": 939, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},
    
        8018001:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":285.8,"直線合計": 1055, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
        8018002:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":285.8,"直線合計": 1055, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
    
        8019001:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":385.8,"直線合計": 1155, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
        8019002:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":385.8,"直線合計": 1155, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
    

        #阪神
        9012001:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":343.6,"直線合計": 696, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9012002:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":343.6,"直線合計": 696, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
    
        9014001:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":543.6,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9014002:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":543.6,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
    
        9018001:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":298.2,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},
        9018002:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":298.2,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},

        9020001:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":498.2,"直線合計": 1221, "コーナー合計m":779,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},
        9020002:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":498.2,"直線合計": 1221, "コーナー合計m":779,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},


        #小倉
        10010001:{"コーナー数": 2, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 661, "コーナー合計m":339,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":-0.7,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
        10010002:{"コーナー数": 2, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 661, "コーナー合計m":339,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":-0.7,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
    
        10017001:{"コーナー数": 4, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":343.0,"直線合計": 1022, "コーナー合計m":678,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0.4,"向正面坂":-0.7,"最初コーナー坂":2.2,"最終コーナー坂":-0.3},
        10017002:{"コーナー数": 4, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":343.0,"直線合計": 1022, "コーナー合計m":678,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0.4,"向正面坂":-0.7,"最初コーナー坂":2.2,"最終コーナー坂":-0.3},
    
        10024001:{"コーナー数": 6, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1383, "コーナー合計m":1017,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
        10024002:{"コーナー数": 6, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1383, "コーナー合計m":1017,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
    



        # "門別": 30,
        # "盛岡": 35,
        # "水沢": 36,
        # "浦和": 42,
        # "船橋": 43,
        # "大井": 44,
        # "川崎": 45,
        # "金沢": 46,
        # "笠松": 47,
        # "名古屋": 48,
        # "園田": 50,
        # "高知": 54,
        # "姫路": 51,
        # "佐賀": 55


        #門別
        30010001:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 720, "コーナー合計m":280,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30010002:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 720, "コーナー合計m":280,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30011001:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 820, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30011002:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 820, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        30012001:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":490.0,"直線合計": 920, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30012002:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":490.0,"直線合計": 920, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        30015001:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":168.0,"直線合計": 674, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30015002:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":168.0,"直線合計": 674, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30016001:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":268.0,"直線合計": 774, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30016002:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":268.0,"直線合計": 774, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30017001:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":258.0,"直線合計": 988, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30017002:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":258.0,"直線合計": 988, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30018001:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30018002:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30020001:{"コーナー数": 4, "最終直線": 530, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30020002:{"コーナー数": 4, "最終直線": 530, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},


        #盛岡

        35010001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 580, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.25,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35010002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 580, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.25,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        35012001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":480.0,"直線合計": 780, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35012002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":480.0,"直線合計": 780, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        35014001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":680.0,"直線合計": 980, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35014002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":680.0,"直線合計": 980, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        35016001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":880.0,"直線合計": 1180, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35016002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":880.0,"直線合計": 1180, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        
        35018001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},
        35018002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},

        35020001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},
        35020002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},

        35025001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 1280, "コーナー合計m":1220,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1,"向正面坂":2,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35025002:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 1280, "コーナー合計m":1220,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1,"向正面坂":2,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        #盛岡芝
        35110001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":300,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},
        35110002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":300,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},
        
        35116001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},
        35116002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},

        35117001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},
        35117002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},
    
        35124001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":900,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":2.0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},
        35124002:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":900,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":2.0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},


        #水沢
        3608501:{"コーナー数": 2, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":317.0,"直線合計": 562, "コーナー合計m":288,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        3608502:{"コーナー数": 2, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":317.0,"直線合計": 562, "コーナー合計m":288,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
                
        36013001:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 762, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36013002:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 762, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        36014001:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 862, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36014002:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 862, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36016001:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1062, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36016002:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1062, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36018001:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":67.0,"直線合計": 929, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36018002:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":67.0,"直線合計": 929, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36019001:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":167.0,"直線合計": 1029, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36019002:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":167.0,"直線合計": 1029, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36020001:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":267.0,"直線合計": 1129, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36020002:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":267.0,"直線合計": 1129, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    

        #浦和
        4208001:{"コーナー数": 2, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 520, "コーナー合計m":280,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4208001:{"コーナー数": 2, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 520, "コーナー合計m":280,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42013001:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":220.0,"直線合計": 740, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42013002:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":220.0,"直線合計": 740, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42014001:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 840, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42014002:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 840, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42015001:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":420.0,"直線合計": 940, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42015002:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":420.0,"直線合計": 940, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42016001:{"コーナー数": 5, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 940, "コーナー合計m":660,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42016002:{"コーナー数": 5, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 940, "コーナー合計m":660,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42019001:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1060, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42019002:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1060, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42020001:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1160, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42020002:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1160, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        

        #船橋
        4308001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 448, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,  "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4308002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 448, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43010001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 648, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43010002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 648, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        43012001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 848, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43012002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 848, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        43014001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":126.0,"直線合計": 796, "コーナー合計m":604,"コーナータイプ":4,"コーナーR12":91,"コーナーR34":91,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43014002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":126.0,"直線合計": 796, "コーナー合計m":604,"コーナータイプ":4,"コーナーR12":91,"コーナーR34":91,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        43015001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":226.0,"直線合計": 896, "コーナー合計m":604,"コーナータイプ":4,"コーナーR12":91,"コーナーR34":91,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43015002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":126.0,"直線合計": 796, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43016001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":226.0,"直線合計": 896, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43016002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":226.0,"直線合計": 896, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43017001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":326.0,"直線合計": 996, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43017002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":326.0,"直線合計": 996, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43018001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":426.0,"直線合計": 1096, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43018002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":426.0,"直線合計": 1096, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43020001:{"コーナー数": 5, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":492.0,"直線合計": 1262, "コーナー合計m":870,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43020002:{"コーナー数": 5, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":492.0,"直線合計": 1262, "コーナー合計m":870,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43022001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 1222, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43022002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 1222, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43024001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1422, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43024002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1422, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        


        #大井

        44010001:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 629, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44010002:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 629, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44012001:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":443.0,"直線合計": 829, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44012002:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":443.0,"直線合計": 829, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44014001:{"コーナー数": 3, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1029, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":51,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44014002:{"コーナー数": 3, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1029, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":51,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44015001:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 912, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44015002:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 912, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44016001:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1012, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44016002:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1012, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        44016501:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 1029, "コーナー合計m":674,"コーナータイプ":5,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44016502:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 1029, "コーナー合計m":674,"コーナータイプ":5,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44017001:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 1026, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44017002:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 1026, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        44018001:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1126, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44018002:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1126, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        44020001:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 1326, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44020002:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 1326, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},


        #川崎
        4509001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":200,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4509002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":200,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        45014001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45014002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        45015001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45015002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        45016001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45016002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        45020001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1400, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45020002:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1400, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        45021001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45021001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        #金沢
        4609001:{"コーナー数": 2, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 522, "コーナー合計m":378,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4609002:{"コーナー数": 2, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 522, "コーナー合計m":378,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46013001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":166.0,"直線合計": 688, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46013001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":166.0,"直線合計": 688, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46014001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":266.0,"直線合計": 788, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46014002:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":266.0,"直線合計": 788, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46015001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":366.0,"直線合計": 888, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46015002:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":366.0,"直線合計": 888, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46017001:{"コーナー数": 5, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 949, "コーナー合計m":751,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46017002:{"コーナー数": 5, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 949, "コーナー合計m":751,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46019001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":86.0,"直線合計": 894, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46019001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":86.0,"直線合計": 894, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        46020001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":186.0,"直線合計": 994, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46020002:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":186.0,"直線合計": 994, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        46021001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 1094, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46021002:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 1094, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        46023001:{"コーナー数": 7, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 1105, "コーナー合計m":1195,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46023002:{"コーナー数": 7, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 1105, "コーナー合計m":1195,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},


        
        #笠松

        4708001:{"コーナー数": 2, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 452, "コーナー合計m":348,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4708002:{"コーナー数": 2, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 452, "コーナー合計m":348,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47014001:{"コーナー数": 4, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 704, "コーナー合計m":696,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47014002:{"コーナー数": 4, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 704, "コーナー合計m":696,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47016001:{"コーナー数": 5, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 730, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47016002:{"コーナー数": 5, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 730, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        47018001:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":151.0,"直線合計": 756, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47018002:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":151.0,"直線合計": 756, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47019001:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 856, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47019002:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 856, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47025001:{"コーナー数": 8, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 1108, "コーナー合計m":1392,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47025002:{"コーナー数": 8, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 1108, "コーナー合計m":1392,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        


        #名古屋
        4809001:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 610, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4809002:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 610, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        4809201:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 630, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4809202:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 630, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48014001:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 820, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48014002:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 820, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48015001:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":380.0,"直線合計": 920, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48015002:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":380.0,"直線合計": 920, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48017001:{"コーナー数": 5, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":135.0,"直線合計": 975, "コーナー合計m":725,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48017002:{"コーナー数": 5, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":135.0,"直線合計": 975, "コーナー合計m":725,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48020001:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 1130, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48020002:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 1130, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48021001:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 1230, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48021002:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 1230, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        

        #園田
        5008201:{"コーナー数": 2, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 538, "コーナー合計m":282,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        5008202:{"コーナー数": 2, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 538, "コーナー合計m":282,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        
        50012301:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":207.0,"直線合計": 666, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        50012302:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":207.0,"直線合計": 666, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        
        50014001:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":407.0,"直線合計": 866, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        50014002:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":407.0,"直線合計": 866, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        
        50017001:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":155.0,"直線合計": 854, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        50017002:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":155.0,"直線合計": 854, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        
        50018701:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 1024, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        50018702:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 1024, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        


        #高知
        5408001:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 440, "コーナー合計m":360,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        5408002:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 440, "コーナー合計m":360,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        
        54010001:{"コーナー数": 3, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 500, "コーナー合計m":500,"コーナータイプ":4,"コーナーR12":35,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        54010002:{"コーナー数": 3, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 500, "コーナー合計m":500,"コーナータイプ":4,"コーナーR12":35,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        
        54013001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 640, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        54013002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 640, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        
        54014001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":310.0,"直線合計": 740, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        54014002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":310.0,"直線合計": 740, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.798},
        
        54016001:{"コーナー数": 5, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":100.0,"直線合計": 760, "コーナー合計m":840,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":-0.79,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        54016002:{"コーナー数": 5, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":100.0,"直線合計": 760, "コーナー合計m":840,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":-0.79,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        

        54018001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 800, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        54018002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 800, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        
        54019001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 900, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        54019002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 900, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        
        54021001:{"コーナー数": 7, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 960, "コーナー合計m":1140,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        54021002:{"コーナー数": 7, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 960, "コーナー合計m":1140,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        
        54024001:{"コーナー数": 8, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 1080, "コーナー合計m":1320,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        54024002:{"コーナー数": 8, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 1080, "コーナー合計m":1320,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        

        #姫路
        5108001:{"コーナー数": 2, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 550, "コーナー合計m":250,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        5108002:{"コーナー数": 2, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 550, "コーナー合計m":250,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        51014001:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":350.0,"直線合計": 900, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51014002:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":350.0,"直線合計": 900, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        51015001:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":450.0,"直線合計": 1000, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51015002:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":450.0,"直線合計": 1000, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        51018001:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 1050, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51018002:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 1050, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        51020001:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1250, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51020002:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1250, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        #佐賀
        5509001:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 590, "コーナー合計m":310,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        5509002:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 590, "コーナー合計m":310,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55013001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 680, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55013002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 680, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        55014001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":330.0,"直線合計": 780, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55014002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":330.0,"直線合計": 780, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55017501:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 820, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55017501:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 820, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55018001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":170.0,"直線合計": 870, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55018002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":170.0,"直線合計": 870, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55018601:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 930, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55018602:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 930, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55020001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 1070, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55020002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 1070, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        




        #芝
        #札幌
        1112001:{"コーナー数": 2, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 410.0,"直線合計": 670, "コーナー合計m":530,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":-0.2,"最終コーナー坂":-0.1},
        1112002:{"コーナー数": 2, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 410.0,"直線合計": 670, "コーナー合計m":530,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":-0.2,"最終コーナー坂":-0.1},

        1115001:{"コーナー数": 3, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 170.0,"直線合計": 670, "コーナー合計m":830,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":0,"最終コーナー坂":-0.1},
        1115002:{"コーナー数": 3, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 170.0,"直線合計": 670, "コーナー合計m":830,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":0,"最終コーナー坂":-0.1},

        1118001:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 180.0,"直線合計": 740, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
        1118002:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 180.0,"直線合計": 740, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
    
        1120001:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 380.0,"直線合計": 940, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.2,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
        1120002:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 380.0,"直線合計": 940, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.2,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
    
        1126001:{"コーナー数": 6, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 160.0,"直線合計": 1010, "コーナー合計m":1590,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.3,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
        1126002:{"コーナー数": 6, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 160.0,"直線合計": 1010, "コーナー合計m":1590,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.3,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
    

        #函館
        2110001:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":289.1,"直線合計": 552, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1.8,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},
        2110002:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":289.1,"直線合計": 552, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1.8,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},

        2112001:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":489.10,"直線合計": 752, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":2.1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},
        2112002:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":489.10,"直線合計": 752, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":2.1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},

        2118001:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":275.80,"直線合計": 904, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.3,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},
        2118002:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":275.80,"直線合計": 904, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.3,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},

        2120001:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":475.8,"直線合計": 1104, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.7,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},
        2120002:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":475.8,"直線合計": 1104, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.7,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},

        2126001:{"コーナー数": 6, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":262.5,"直線合計": 1256, "コーナー合計m":1344,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},
        2126002:{"コーナー数": 6, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":262.5,"直線合計": 1256, "コーナー合計m":1344,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},


        #福島
        3110001:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 502, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3110002:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 502, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},

        3112001:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 411.7,"直線合計": 702, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3112002:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 411.7,"直線合計": 702, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
    
        3117001:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 205.3,"直線合計": 825, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":0.5,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3117002:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 205.3,"直線合計": 825, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":0.5,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        
        3118001:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 305.3,"直線合計": 925, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3118002:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 305.3,"直線合計": 925, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
    
        3120001:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 505.3,"直線合計": 1125, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3120002:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 505.3,"直線合計": 1125, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
    
        3126001:{"コーナー数":6, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 1227, "コーナー合計m":1373,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3126002:{"コーナー数":6, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 1227, "コーナー合計m":1373,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
    

        #新潟
        4110001:{"コーナー数": 0, "最終直線": 1000, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 1000,"直線合計": 1000, "コーナー合計m":1,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":0,"高低差":1,"幅":25.0,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4110002:{"コーナー数": 0, "最終直線": 1000, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 1000,"直線合計": 1000, "コーナー合計m":1,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":0,"高低差":1,"幅":25.0,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        4112001:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 444.9,"直線合計": 804, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
        4112002:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 444.9,"直線合計": 804, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
            
        4114001:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 644.9,"直線合計": 1004, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
        4114002:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 644.9,"直線合計": 1004, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
            
        4116001:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 547.9,"直線合計": 1207, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
        4116002:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 547.9,"直線合計": 1207, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
            
        4118001:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 747.9,"直線合計": 1407, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":0.2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
        4118002:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 747.9,"直線合計": 1407, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":0.2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
        
        4120001:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 436.4,"直線合計": 1208, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":0,"向正面坂":0.3,"最初コーナー坂":0.3,"最終コーナー坂":-0.3},
        
        4120002:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 947.9,"直線合計": 1607, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":124,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":0.2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
    
        4122001:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 636.4,"直線合計": 1408, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        4122002:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 636.4,"直線合計": 1408, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        
        4124001:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 836.4,"直線合計": 1608, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-1.7,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        4124002:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 836.4,"直線合計": 1608, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-1.7,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        

        #東京
        5114001:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":342.7,"直線合計": 869, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        5114002:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":342.7,"直線合計": 869, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        
        5116001:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":542.7,"直線合計":1069, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        5116002:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":542.7,"直線合計":1069, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        
        5118001:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":156.6,"直線合計":1226, "コーナー合計m":574,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5118002:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":156.6,"直線合計":1226, "コーナー合計m":574,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5120001:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":126.2,"直線合計":1195, "コーナー合計m":805,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5120002:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":126.2,"直線合計":1195, "コーナー合計m":805,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5123001:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":249.5,"直線合計":1321, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5123002:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":249.5,"直線合計":1321, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5124001:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":349.5,"直線合計":1421, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5124002:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":349.5,"直線合計":1421, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5125001:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":449.5,"直線合計":1521, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":2,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5125002:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":449.5,"直線合計":1521, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":2,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5134001:{"コーナー数": 6, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":259.8,"直線合計":1890, "コーナー合計m":1510,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        5134002:{"コーナー数": 6, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":259.8,"直線合計":1890, "コーナー合計m":1510,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        


        #中山
        6112001:{"コーナー数": 2, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":275.1,"直線合計": 585, "コーナー合計m":615,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":-3.7,"向正面坂":-2,"最初コーナー坂":-1,"最終コーナー坂":-0.4},
        6112002:{"コーナー数": 2, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":275.1,"直線合計": 585, "コーナー合計m":615,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":-3.7,"向正面坂":-2,"最初コーナー坂":-1,"最終コーナー坂":-0.4},
        
        6116001:{"コーナー数": 3, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":239.8,"直線合計": 825, "コーナー合計m":775,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6116002:{"コーナー数": 3, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":239.8,"直線合計": 825, "コーナー合計m":775,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6118001:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":204.9,"直線合計": 885, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6118002:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":204.9,"直線合計": 885, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6120001:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":404.9,"直線合計": 1085, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6120002:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":404.9,"直線合計": 1085, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6122001:{"コーナー数": 5, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":432.3,"直線合計": 1017, "コーナー合計m":1183,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6122002:{"コーナー数": 5, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":432.3,"直線合計": 1017, "コーナー合計m":1183,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6125001:{"コーナー数": 6, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":192.0,"直線合計": 1277, "コーナー合計m":1223,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":0,"向正面坂":-2,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        6125002:{"コーナー数": 6, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":192.0,"直線合計": 1277, "コーナー合計m":1223,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":0,"向正面坂":-2,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        
        6136001:{"コーナー数": 8, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":337.7,"直線合計": 1776, "コーナー合計m":1824,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6136002:{"コーナー数": 8, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":337.7,"直線合計": 1776, "コーナー合計m":1824,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},


        #中京
        7112001:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":315.5,"直線合計": 728, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":-0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7112002:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":315.5,"直線合計": 728, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":-0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7113001:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7113002:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7114001:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":515.5,"直線合計": 928, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7114002:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":515.5,"直線合計": 928, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7116001:{"コーナー数": 3, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":199.0,"直線合計": 1028, "コーナー合計m":572,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":0.5,"最終コーナー坂":-1},
        7116002:{"コーナー数": 3, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":199.0,"直線合計": 1028, "コーナー合計m":572,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":0.5,"最終コーナー坂":-1},

        7120001:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":314.1,"直線合計": 1142, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},
        7120002:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":314.1,"直線合計": 1142, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},

        7122001:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":514.1,"直線合計": 1342, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},
        7122002:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":514.1,"直線合計": 1342, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},

        7130001:{"コーナー数": 6, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7130002:{"コーナー数": 6, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},


        #京都
        8112001:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":316.2,"直線合計": 644, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":3,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        8112002:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":316.2,"直線合計": 644, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":3,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        
        8114001:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":516.2,"直線合計": 844, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        
        8114002:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":511.7,"直線合計": 916, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},
        
        8116001:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":716.2,"直線合計": 1044, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        
        8116002:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":711.7,"直線合計":1116, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},

        8118001:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":911.7,"直線合計":1316, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},
        8118002:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":911.7,"直線合計":1316, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},

        8120001:{"コーナー数": 4, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":308.7,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":4,"コーナーR12":130,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        8120002:{"コーナー数": 4, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":308.7,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":4,"コーナーR12":130,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},

        8122001:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":397.3,"直線合計":1339, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        8122002:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":397.3,"直線合計":1339, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},

        8124001:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":597.3,"直線合計":1539, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        8124002:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":597.3,"直線合計":1539, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},

        8130001:{"コーナー数": 6, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":217.4,"直線合計":1655, "コーナー合計m":1345,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":3,"向正面坂":4,"最初コーナー坂":-3,"最終コーナー坂":-0.4},
        8130002:{"コーナー数": 6, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":217.4,"直線合計":1655, "コーナー合計m":1345,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":3,"向正面坂":4,"最初コーナー坂":-3,"最終コーナー坂":-0.4},

        8132001:{"コーナー数": 6, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":417.4,"直線合計":1855, "コーナー合計m":1345,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":4,"向正面坂":4,"最初コーナー坂":-3,"最終コーナー坂":-0.4},
        

        #阪神
        9112001:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":258.2,"直線合計": 615, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-0.2,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9112002:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":258.2,"直線合計": 615, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-0.2,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
                    
        9114001:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":458.2,"直線合計": 815, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9114002:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":458.2,"直線合計": 815, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
            
        9116001:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":444.4,"直線合計": 918, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":-0.2,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},
        9116002:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":444.4,"直線合計": 918, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":-0.2,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},

        9118001:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":644.4,"直線合計": 1118, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},
        9118002:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":644.4,"直線合計": 1118, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},

        9120001:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":330.5,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
        9120002:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":330.5,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
            
        9122001:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":530.5,"直線合計": 1267, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
        9122002:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":530.5,"直線合計": 1267, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
        
        9124001:{"コーナー数": 4, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":309.0,"直線合計": 1370, "コーナー合計m":1030,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":1.9,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":-2.2},
        9124002:{"コーナー数": 4, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":309.0,"直線合計": 1370, "コーナー合計m":1030,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":1.9,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":-2.2},

        9130001:{"コーナー数": 6, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":369.2,"直線合計": 1482, "コーナー合計m":1518,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-1.8},
        9130002:{"コーナー数": 6, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":369.2,"直線合計": 1482, "コーナー合計m":1518,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-1.8},
    
        
        #小倉
        10112001:{"コーナー数": 2, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	479.0,"直線合計":772, "コーナー合計m":428,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":-1,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3},
        10112002:{"コーナー数": 2, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	479.0,"直線合計":772, "コーナー合計m":428,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":-1,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3},

        10117001:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	172.0,"直線合計":844, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},
        10117002:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	172.0,"直線合計":844, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},

        10118001:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	272.0,"直線合計":944, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},
        10118002:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	272.0,"直線合計":944, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},

        10120001:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	472.0,"直線合計":1144, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},
        10120002:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	472.0,"直線合計":1144, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},

        10126001:{"コーナー数": 6, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	240.0,"直線合計":1326, "コーナー合計m":1274,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3},
        10126002:{"コーナー数": 6, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	240.0,"直線合計":1326, "コーナー合計m":1274,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3}
    }






    # データフレームに変換情報を適用する関数
    def convert_course(row):
        place_code = row["course_type"]  # 競馬場の数値コード
        if place_code in conversion_map_course_type:
            # 直線、カーブ、ゴール前の情報を取得
            course_info = conversion_map_course_type[place_code]
            # 列名を変更
            return pd.Series({
                "goal_range": course_info["最終直線"], 

                "curve": course_info["コーナータイプ"], 
                "goal_slope": course_info["ゴール前坂"],
                "curve_amount": course_info["コーナー数"], 

                "start_point": course_info["スタート位置"], 
                "start_range": course_info["最初直線"], 
                "straight_total": course_info["直線合計"], 
                "curve_total": course_info["コーナー合計m"],
                "curve_R12": course_info["コーナーR12"],
                "curve_R34": course_info["コーナーR34"],
                "height_diff": course_info["高低差"],
                "width": course_info["幅"],
                "start_slope": course_info["最初坂"],
                "flont_slope": course_info["向正面坂"],
                "first_curve_slope": course_info["最初コーナー坂"],
                "last_curve_slope": course_info["最終コーナー坂"]
            })
        else:
            return pd.Series({"goal_range": None, "curve": None, "goal_slope": None,"curve_amount":None,"start_point":None,"start_range":None,"straight_total":None,"curve_total":None,"curve_R12":None,"curve_R34":None,"height_diff":None,"width":None,"start_slope":None,"flont_slope":None,"first_curve_slope":None,"last_curve_slope":None})
    
    # 競馬場カテゴリに基づく変換を追加
    df[['goal_range', 'curve', 'goal_slope',"curve_amount","start_point","start_range","straight_total","curve_total","curve_R12","curve_R34","height_diff","width","start_slope","flont_slope","first_curve_slope","last_curve_slope"]] = df.apply(convert_course, axis=1)
    
    df["goal_range_100"] = df["goal_range"].astype(float)/100

    # # `course_type` に基づく情報を取得する関数
    # def convert_course(place_code):
    #     if place_code in conversion_map_course_type:
    #         # コース情報を取得
    #         course_info = conversion_map_course_type[place_code]
    #     else:
    #         # すべてのカラムを `None` にする辞書を作成
    #         keys = ["最終直線", "コーナー数", "コーナータイプ", "ゴール前坂", 
    #                 "スタート位置", "最初直線", "直線合計", "コーナー合計m", 
    #                 "コーナーR12", "コーナーR34", "高低差", "幅", "最初坂", 
    #                 "向正面坂", "最初コーナー坂", "最終コーナー坂"]
    #         course_info = dict.fromkeys(keys, None)
        
    #     # DataFrame 用に列名を統一
    #     return pd.Series({
    #         "goal_range": course_info["最終直線"], 
    #         "curve_amount": course_info["コーナー数"], 
    #         "curve": course_info["コーナータイプ"], 
    #         "goal_slope": course_info["ゴール前坂"],

    #         "start_point": course_info["スタート位置"], 
    #         "start_range": course_info["最初直線"], 
    #         "straight_total": course_info["直線合計"], 
    #         "curve_total": course_info["コーナー合計m"],
    #         "curve_R12": course_info["コーナーR12"],
    #         "curve_R34": course_info["コーナーR34"],
    #         "height_diff": course_info["高低差"],
    #         "width": course_info["幅"],
    #         "start_slope": course_info["最初坂"],
    #         "flont_slope": course_info["向正面坂"],
    #         "first_curve_slope": course_info["最初コーナー坂"],
    #         "last_curve_slope": course_info["最終コーナー坂"]
    #     })

    # # `map(pd.Series)` を使って DataFrame にマージ（高速化）
    # df = df.join(df["course_type"].map(convert_course))

    # # `goal_range` の値を100で割る（`NaN` に対応）
    # df["goal_range_100"] = pd.to_numeric(df["goal_range"], errors="coerce") / 100




    #競馬場_季節_芝ダート障害_長さ
    df["place_season_type_course_len"] = df["place_season_type"] + df["course_len"].astype(str)
    
    """
    ラップの緩急差が小さいコース
    中山芝1600
    阪神芝1400
    東京芝1400
    東京芝1600
    
    緩急のあるラップで脚を溜めやすいコース
    京都芝1200
    京都芝1400外
    中山(秋)芝1200
    中山芝2000
    阪神芝1200
    阪神芝1600外
    阪神芝1800外
    阪神芝2400外
    新潟芝1200、1400内
    札幌芝1200、1800、2000
    東京芝1800、2000、2400
    
    ロングスパート戦になりやすいコース
    東京芝1600、2400
    中山芝1800、2000、2200
    京都芝1600、1800、2200、2400外
    京都芝2000内
    阪神芝2000、2200内、2400外
    福島芝1800、2000、1700
    新潟芝1600、1800、2000外、2200内
    小倉芝1800、2000
    中京芝1600、2000、2200
    札幌芝1500、2000、2600
    
    
    失速ラップになりやすいコース
    中山芝1200
    福島芝1200
    小倉芝1200
    新潟芝1000
    函館芝1200、1800、2000
    中京芝1200、1400、1600、2000
    """
    
    # マッピングを定義
    mapping = {
        # ラップの緩急差が小さいコース → 4
        "6111600": 4, "6211600": 4, "6311600": 4, "6411600": 4,  # 中山(春/夏/秋/冬)芝1600
        "9111400": 4, "9211400": 4, "9311400": 4, "9411400": 4,  # 阪神(春/夏/秋/冬)芝1400
        "5111400": 4, "5211400": 4, "5311400": 4, "5411400": 4,  # 東京(春/夏/秋/冬)芝1400
        "5111600": 4, "5211600": 4, "5311600": 4, "5411600": 4,  # 東京(春/夏/秋/冬)芝1600
    
        # 緩急のあるラップで脚を溜めやすいコース → 3
        "8111200": 3, "8211200": 3, "8311200": 3, "8411200": 3,  # 京都(春/夏/秋/冬)芝1200
        "8111400": 3, "8211400": 3, "8311400": 3, "8411400": 3,  # 京都(春/夏/秋/冬)芝1400外
        "6311200": 3,  # 中山(秋)芝1200
        "6112000": 3, "6212000": 3, "6312000": 3, "6412000": 3,  # 中山(春/夏/秋/冬)芝2000
        "9111200": 3, "9211200": 3, "9311200": 3, "9411200": 3,  # 阪神(春/夏/秋/冬)芝1200
        "9111600": 3, "9211600": 3, "9311600": 3, "9411600": 3,  # 阪神(春/夏』/秋/冬)芝1600外
        "9111800": 3, "9211800": 3, "9311800": 3, "9411800": 3,  # 阪神(春/夏/秋/冬)芝1800外
        "9112400": 3, "9212400": 3, "9312400": 3, "9412400": 3,  # 阪神(春/夏/秋/冬)芝2400外
    
        # ロングスパート戦になりやすいコース → 2
        "5111600": 2, "5211600": 2, "5311600": 2, "5411600": 2,  # 東京(春/夏/秋/冬)芝1600
        "5112400": 2, "5212400": 2, "5312400": 2, "5412400": 2,  # 東京(春/夏/秋/冬)芝2400
        "6111800": 2, "6211800": 2, "6311800": 2, "6411800": 2,  # 中山(春/夏/秋/冬)芝1800
        "6112000": 2, "6212000": 2, "6312000": 2, "6412000": 2,  # 中山(春/夏/秋/冬)芝2000
        "6112200": 2, "6212200": 2, "6312200": 2, "6412200": 2,  # 中山(春/夏/秋/冬)芝2200
        "8111600": 2, "8211600": 2, "8311600": 2, "8411600": 2,  # 京都(春/夏/秋/冬)芝1600外
        "8111800": 2, "8211800": 2, "8311800": 2, "8411800": 2,  # 京都(春/夏/秋/冬)芝1800外
        "8112200": 2, "8212200": 2, "8312200": 2, "8412200": 2,  # 京都(春/夏/秋/冬)芝2200外
        "8112400": 2, "8212400": 2, "8312400": 2, "8412400": 2,  # 京都(春/夏/秋/冬)芝2400外
    
        # 失速ラップになりやすいコース → 1
        "6111200": 1, "6211200": 1, "6411200": 1,  # 中山(春/夏/冬)芝1200
        "3111200": 1, "3211200": 1, "3311200": 1, "3411200": 1,  # 福島(春/夏/秋/冬)芝1200
        "10111200": 1, "11111200": 1, "12111200": 1, "13111200": 1,  # 小倉(春/夏/秋/冬)芝1200
        "4111000": 1, "4211000": 1, "4311000": 1, "4411000": 1,  # 新潟(春/夏/秋/冬)芝1000
        "2111200": 1, "2211200": 1, "2311200": 1, "2411200": 1,  # 函館(春/夏/秋/冬)芝1200
        "7111200": 1, "7211200": 1, "7311200": 1, "7411200": 1,  # 中京(春/夏/秋/冬)芝1200
    }
    
    # `place_season_type_course_len` をマッピングに基づいて変換
    df["lap_type"] = df["place_season_type_course_len"].map(mapping)
    # マッピングできなかったものを NaN にする
    df['lap_type'] = df['lap_type'].fillna(-1)
    df['lap_type'] = df['lap_type'].astype(int)
    
    
    
    
    # 各列をint型に変換
    
    df["race_class"] = df["race_class"].astype(int)
    df["ground_state"] = df["ground_state"].astype(int)
    df["around"] = df["around"].fillna(3).astype(int)
    df["weather"] = df["weather"].astype(int)
    
    
    
    # df[['goal_range', 'curve', 'goal_slope']] = df[['goal_range', 'curve', 'goal_slope']].fillna(-10000).astype(int)
    # df["place_season_type_course_len"] = df["place_season_type_course_len"].fillna(-10000).astype(int)
    # df['lap_type'] = df['lap_type'].fillna(-10000).astype(int)
    
    
    df["course_len"] = df["course_len"].astype(int)
    df["season"] = df["season"].astype(int)
    df["place_season"] = df["place_season"].astype(int)
    df["place_season_type"] = df["place_season_type"].astype(int)
    df["kaisai_race"] = df["kaisai_race"].astype(int)
    df["kaisai_race_type"] = df["kaisai_race_type"].astype(int)
    df["day"] = df["day"].astype(int)
    df["day_type"] = df["day_type"].astype(int)
    df["kaisai_count"] = df["kaisai_count"].astype(int)
    df["kaisai_count_type"] = df["kaisai_count_type"].astype(int)
    df["place_season_day_type"] = df["place_season_day_type"].astype(int)
    df["day_condition"] = df["day_condition"].astype(int)
    df["place_season_condition_type"] = df["place_season_condition_type"].astype(int)
    
    # df['goal_range'] = df['goal_range'].fillna(-10000).astype(int)
    # df['curve'] = df['curve'].fillna(-10000).astype(int)
    # df['goal_slope'] = df['goal_slope'].fillna(-10000).astype(int)
    
    df["course_type"] = df["course_type"].astype(int)
    
    df["course_len_type"] = df["course_len_type"].astype(int)

    df = df.replace('None', pd.NA)

    columns_to_convert_x = [
        "goal_range", "curve", "goal_slope", "curve_amount", "start_point",
        "start_range", "straight_total", "curve_total", "curve_R12", "curve_R34",
        "height_diff", "width", "start_slope", "flont_slope",
        "first_curve_slope", "last_curve_slope"
    ]

    df[columns_to_convert_x] = df[columns_to_convert_x].fillna(-10000).astype(float)

    # 使用する列を選択
    df = df[
        [
            "race_id",
            "date",
            "race_type",
            "around",
            "course_len",
            "weather",
            "ground_state",
            "race_class",
            "place",
            "season_level",
            
            "season",
            "place_season",
            "place_season_type",
            "kaisai_race",
            "kaisai_race_type",
            "day",
            "day_type",
            "kaisai_count",
            "kaisai_count_type",
            "place_season_day_type",
            "day_condition",
            "place_season_condition_type",
            'place_season_condition_type_categori',
            
            "place_course_category",
            "place_course_tough",
            'goal_range',
            'curve',
            'goal_slope',
            "place_season_type_course_len",
            "lap_type",
            "race_day_count",
            "race_date_day_count",

            "goal_range_100",

            "course_type",
            "course_len_type",

            "curve_amount",
            "start_point",
            "start_range",
            "straight_total",
            "curve_total",
            "curve_R12",
            "curve_R34",
            "height_diff",
            "width",
            "start_slope",
            "flont_slope",
            "first_curve_slope",
            "last_curve_slope",
            "season_turf",
            "day_season_turf",
            "season_turf_condition",


        ]
    ]
    df.to_csv(output_dir / output_filename, sep="\t", index=False)
    return df

def process_return_tables(  
    population_dir: Path = POPULATION_DIR,
    populaton_filename: str = "population.csv",
    input_dir: Path = RAWDF_DIR,
    input_filename: str = "return_tables.csv",
    output_dir: Path = OUTPUT_DIR,
    output_filename: str = "return_tables.pickle",
    ):
    #未加工の払い戻しーブルをinpuｔ_drから読み込んで加工し、output_dirに保存する
    population = pd.read_csv(population_dir / populaton_filename, sep="\t")
    # df = pd.read_csv(input_dir / input_filename, sep="\t", index_col=0).query(
    #     "race_id in @population['race_id']"
    # )
    population_race_ids = population['race_id'].tolist()
    # クエリでリストを直接使用
    df = pd.read_csv(input_dir / input_filename, sep="\t", index_col=0).query(
        "race_id in @population_race_ids"
    )
    
    df = (
        df[["0","1","2"]]
        .replace(" (-|→) ","-",regex = True)
        .replace(",","",regex= True)
        .apply(lambda x: x.str.split())
        .explode(["1","2"])
        .explode("0")
        .apply(lambda x: x.str.split("-"))
        .explode(["0","2"])
        )
    #列名の変更
    df.columns = ["bet_type","win_umaban","return"]
    # "枠連" を含む行を除外
    df = df.query("bet_type != '枠連'").reset_index()
    #払い戻しのreturnを整数型に変換
    df["return"] = df["return"].astype(int)
    #pickleだとｐythonのオブジェクトとして保存してくれる（文ではなく）,リスト型を維持
    df.to_pickle(output_dir / output_filename)
    return df





def process_horse_results(
    population_dir: Path = POPULATION_DIR,
    populaton_filename: str = "population.csv",
    input_dir: Path = RAWDF_DIR,
    output_dir: Path = OUTPUT_DIR,
    input_filename: str = "horse_results.csv",
    output_filename: str = "horse_results.csv",
    race_type_mapping: dict = race_type_mapping,
    weather_mapping: dict = weather_mapping,
    ground_state_mapping: dict = ground_state_mapping,
    race_class_mapping: dict = race_class_mapping,
    place_mapping: dict = place_mapping,
) -> pd.DataFrame:
    """
    未加工の馬の過去成績テーブルをinput_dirから読み込んで加工し、
    output_dirに保存する関数。
    """
    population = pd.read_csv(population_dir / populaton_filename, sep="\t")
    # df = pd.read_csv(input_dir / input_filename, sep="\t").query(
    #     "horse_id in @population['horse_id']"
    # )
    population_horse_ids = population['horse_id'].tolist()
    
    # クエリでリストを直接使用
    df = pd.read_csv(input_dir / input_filename, sep="\t").query(
        "horse_id in @population_horse_ids"
    )

    
    df["rank"] = pd.to_numeric(df["着順"], errors="coerce")
    df.dropna(subset=["rank"], inplace=True)
    df["date"] = pd.to_datetime(df["日付"])
    df["weather"] = df["天気"].map(weather_mapping)
    df["race_type"] = df["距離"].str[0].map(race_type_mapping)
    
    df["course_len"] = df["距離"].str.extract(r"(\d+)").astype(int)
    df["ground_state"] = df["馬場"].map(ground_state_mapping)
    # df["rank_diff"] = df["着差"].map(lambda x: 0 if x < 0 else x)
    # df["rank_diff"] = df["着差"].map(lambda x: max(0, x + 1))
    df["rank_diff"] = df["着差"].map(lambda x: max(0, x * 0.7 + 1 if x <= 0 else x + 1))
    df["rank_diff"] += 1

    df["prize"] = df["賞金"].fillna(0)
    df["umaban"] = df["馬番"].astype(int)
    df["umaban_odd"] = (df["umaban"] % 2 == 1).astype(int)
    #1（奇数）または 0（偶数）
    df["impost"] = df["斤量"].astype(float)
    df["wakuban"] = df["枠番"].fillna(0).astype(int)

    
    df["nobori"] = df["上り"].astype(float)
    
    regex_race_class = "|".join(race_class_mapping)
    df["race_class"] = (
        df["レース名"].str.extract(rf"({regex_race_class})")[0].map(race_class_mapping)
    )
    # 正規表現パターン（例）
    regex_age_n = r"4歳|3歳|2歳"
    # レースクラスのマッピング
    age_n_mapping = {
        "4歳": 4,
        "3歳": 3,
        "2歳": 2,
    }
    df["age_n"] = (
        df["レース名"].str.extract(rf"({regex_age_n})")[0].map(age_n_mapping)
    )
    df["age_n"] = df["age_n"].fillna(5)  


    df["time"] = pd.to_datetime(df["タイム"], format="%M:%S.%f", errors="coerce")
    df["time"] = (
        df["time"].dt.minute * 60
        + df["time"].dt.second
        + df["time"].dt.microsecond / 1000000
    )
    df["win"] = (df["rank"] == 1).astype(int)
    df["rentai"] = (df["rank"] <= 2).astype(int)
    df["show"] = (df["rank"] <= 3).astype(int)
    df["place"] = df["開催"].str.extract(r"(\D+)")[0].map(place_mapping)
    df.dropna(subset=["place"], inplace=True)    
    # 整数型に変換
    df["place"] = df["place"].astype(int)
    df["kaisai_race"] = df["開催"].str.extract(r"^(\d+)")
    df["day"] = df["開催"].str.extract(r"(\d+)$")
    # df["kaisai_race"] = df["kaisai_race"].astype(int)
    # df["day"] = df["day"].astype(int)
    df["kaisai_race"] = df["kaisai_race"].fillna(6).astype(int)
    df["day"] = df["day"].fillna(6).astype(int)
    df.dropna(subset=["race_class"], inplace=True)
    df["race_class"] = df["race_class"].fillna(-14).astype(int)



    df.rename(columns={"頭数": "n_horses"}, inplace=True)
    df["weight"] = df["馬体重"].str.extract(r"(\d+)").astype(float)
    df["weight_diff"] = df["馬体重"].str.extract(r"\((.+)\)").astype(float)


    pace_cols = df['ペース'].str.split('-', expand=True)
    pace_cols.columns = [f'pace_{i+1}' for i in range(pace_cols.shape[1])]
    
    # データ型変換と型確認
    pace_cols = pace_cols.apply(pd.to_numeric, errors='coerce').astype('float64')

    # 元のデータフレームと結合
    df = pd.concat([df, pace_cols], axis=1)

    # course_len の上2桁を取得して奇数かどうかを判定
    df['course_len_prefix'] = df['course_len'].astype(str).str[:2].astype(float)  # 上2桁を取得
        
    df.loc[df['course_len_prefix'] % 2 != 0, 'pace_1'] = (df['pace_1']* 6/5)
    
    df.loc[df["pace_1"] == 0, "pace_1"] = df["pace_2"]

    # pace_2 - pace_1 の計算
    #+だとハイペース、ーだとスローペース
    df['pace_diff'] = df['pace_2'] - df['pace_1']

    # pace_diff をカテゴリに分ける関数
    def categorize_pace_diff(value):
        if value < -1.0:
            return 4  # ハイペース
        elif -1.0 <= value <= 0.0:
            return 3  # ハイミドルペース
        elif 0.0 < value <= 1.0:
            return 2  # スローミドルペース
        elif value > 1.0:
            return 1  # スローペース
        return None  # 値が NaN の場合など
        
    
    # 新しい列にカテゴリを適用
    df["pace_category"] = df["pace_diff"].apply(categorize_pace_diff)    

    """
    京都競馬場の芝1400ｍは内回りコースと外回りコースがあります。
    外周りコースは500万以下条件から重賞まで上のクラスで行われ、反対に内回りコースは500万以下までの競走で使われるようです。

    京都芝1400mは内・外回りがあるが、内回りは2～3歳の新馬、未勝利、500万クラスの下級条件で行われている。
    2000mの内回りコースが使われるのは2歳戦と3歳未勝利。
    """
    # すべてのデータをデフォルトで 1 にする
    df["course_len_type"] = 1  

    # 条件を満たすデータに対して 2 を設定
    df.loc[
        (df["place"] == 8) & (df["race_type"] == 1) & (df["course_len"].isin([1400, 1600])),
        "course_len_type"
    ] = 2

    df.loc[
        (df["place"] == 4) & (df["race_type"] == 1) & (df["course_len"] == 2000),
        "course_len_type"
    ] = 2


    df["course_type"] = df["place"].astype(str)+ df["race_type"].astype(str) + df["course_len"].astype(str) + df["course_len_type"].astype(str) 


    # NoneをNaNに置き換え
    # df = df.where(pd.notnull(df), np.nan)
    df["place"] = df["place"].astype(int)
    df["race_class"] = df["race_class"].astype(int)
    df["ground_state"] = df["ground_state"].astype(int)
    df["weather"] = df["weather"].astype(int)   

        
    """
    ホースリザルトは、シーズンデータ入れなくてもいいかも
    年齢は入ってるからそれで
    
    
    dfに新たな列、race_gradeを作成して欲しい
    作成ルールは以下の通りである
    'age_season'の条件に引っかかった場合、それを優先すること
    次点で"race_class"の条件にかかっても、'age_season'がある方を優先して変換すること
    
    
    "race_class"列が0は55
    
    "race_class"列が1は60
    
    "race_class"列が2は70
    2歳それ以外は68（20<='age_season'<30かつ、2<="race_class"列<5の行）
    2歳G2,G3,OPは73（20<='age_season'<30かつ、5<="race_class"列<8の行）
    
    "race_class"列が3は79
    2歳G1は79（20<='age_season'<30かつ、8<="race_class"の行）
    3歳春OPは80（30<='age_season'<33かつ、4<="race_class"列<6の行）
    3歳春G2.G3は81（30<='age_season'<33かつ、6<="race_class"列<8の行）
    
    "race_class"列が4は85
    3歳春G1は86（30<='age_season'<33かつ、8<="race_class"の行）
    3歳秋G2,G3は86（33<='age_season'<40かつ、5<="race_class"列<8の行）
    
    "race_class"列が5は89
    3歳秋G1は91（33<='age_season'<40かつ、8<="race_class"の行）
    
    "race_class"列が6は92
    
    "race_class"列が7は94
    
    "race_class"列が8は98
    
    
    
    
    これらを小さく（1/10 - 5）した列
    
    G1 8	100
    G2 7	95
    G3 6	92
    オープン5	89
    1600万4	86
    ２勝クラス3	80
    １勝クラス2	70
    未勝利1	60
    新馬0	55
    
    
    クラス	芝	ダート
    未勝利	６５（-１５）	６０（-２０）
    500万下
    Ｇ１を除く２歳ＯＰ	７５（-５）	７２（-８）
    1000万下
    ２歳Ｇ１
    Ｇ１を除く３歳春ＯＰ	８３（３）	８３（３）
    1600万下
    ３歳春Ｇ１
    ３歳秋重賞	８８（８）	９０（１０）
    ＯＰ（ただしダート重賞を除く）
    ３歳秋Ｇ１	９３（１３）	９５（１５）
    ダート重賞（３歳を除く）	－	１００（２０）
    古馬Ｇ１	９８（１８）	１０５（２５）
    """
    place_adjustment = {
        44: 0, 43: 0, 45: -1,30: -3,
        54: -4,50: -5,51: -5,42: -5,48: -7,
        35: -9,36: -10,46: -13,
        55: -16,47: -19,
        
    }
    # race_gradeの作成
    def calculate_race_grade(row):
        race_class = row['race_class']
        place = row['place']
        # 競馬場ごとの補正値を取得（該当しない場合は0）
        adjustment = place_adjustment.get(place, 0)
        if race_class == 0:
            return 55
        elif race_class == 1:
            return 60
        elif race_class == 2:
            return 70
        elif race_class == 3:
            return 79
        elif race_class == 4:
            return 85
        elif race_class == 5:
            return 89
        elif race_class == 6:
            return 91
        elif race_class == 7:
            return 94
        elif race_class == 8:
            return 98
        

        elif race_class == -4:
            base_grade = 82
        elif race_class == -3:
            base_grade = 83
        elif race_class == -2:
            base_grade = 84
        elif race_class == -1:
            base_grade = 85
        elif race_class == -5:
            base_grade = 80
        elif race_class == -6:
            base_grade = 79
        elif race_class == -7:
            base_grade = 74
        elif race_class == -8:
            base_grade = 69
        elif race_class == -9:
            base_grade = 64
        elif race_class == -10:
            base_grade = 59
        elif race_class == -11:
            base_grade = 55
        elif race_class == -11.5:
            base_grade = 53
        elif race_class == -12.5:
            base_grade = 48
        elif race_class == -12:
            base_grade = 50
        elif race_class == -13:
            base_grade = 50
        elif race_class == -14:
            base_grade = 40
        elif race_class == -15:
            base_grade = 30
        else:
            return np.nan  

        # 競馬場ごとの補正値を適用
        return base_grade + adjustment

    
    # race_grade列を作成
    df['race_grade'] = df.apply(calculate_race_grade, axis=1)
    #race_grade_scaledの作成
    df['race_grade_scaled'] = df['race_grade'] / 10 - 5

    
        
    # コーナー通過順を分割して列を作成
    corner_cols = df['通過'].str.split('-', expand=True)
    corner_cols.columns = [f'corner_{i+1}' for i in range(corner_cols.shape[1])]
    # オブジェクト型のデータを整数型に変換する
    corner_cols = corner_cols.apply(pd.to_numeric, errors='coerce').astype('Int64')  
    # nullable int型を指定
    # 元のデータフレームと結合
    df = pd.concat([df, corner_cols], axis=1)

    # NoneをNaNに置き換え
    df = df.where(pd.notnull(df), np.nan)







    

    #脚質
    def determine_race_position(row):
        # 最終コーナーを決定（corner_1, 2, 3, 4 のいずれか）
        if pd.notna(row['corner_4']):
            final_corner = 'corner_4'
        elif pd.notna(row['corner_3']):
            final_corner = 'corner_3'
        elif pd.notna(row['corner_2']):
            final_corner = 'corner_2'
        elif pd.notna(row['corner_1']):
            final_corner = 'corner_1'
        else:
            return None  # すべて欠損値の場合
    
        # 逃げ判定：最終コーナー以外のコーナーを1位で通過した場合
        if (pd.notna(row['corner_1']) and row['corner_1'] == 1 or 
            pd.notna(row['corner_2']) and row['corner_2'] == 1 or 
            pd.notna(row['corner_3']) and row['corner_3'] == 1 or 
            pd.notna(row['corner_4']) and row['corner_4'] == 1) and pd.notna(row[final_corner]) and row[final_corner] != 1:
            return 1  # 逃げ
    
        # 先行判定：最終コーナーを4位以内で通過
        if row['n_horses'] >= 8 and pd.notna(row[final_corner]) and row[final_corner] <= 5:
            return 2  # 先行
        
        # 先行判定：最終コーナーを4位以内で通過
        if row['n_horses'] < 8 and pd.notna(row[final_corner]) and row[final_corner] <= 4:
            return 2  # 先行
        
        # 差し判定：出走頭数に応じて
        if row['n_horses'] >= 8 and pd.notna(row[final_corner]) and row[final_corner] <= (row['n_horses'] * 2) // 3:
            return 3  # 差し
        elif row['n_horses'] < 8:
            return 4  # 差しなし、追込
    
        # 追込判定：上記のいずれにも該当しない
        return 4  # 追込
    
    # dfの各レースについて脚質を決定
    df['race_position'] = df.apply(determine_race_position, axis=1)
    df = df.where(pd.notnull(df), np.nan)

    






    


    # rank / n_horses の特徴量を作成（欠損値を含む行はNaNに設定）
    df["rank_per_horse"] = df["rank"].where(df["rank"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    
    # corner_1 / n_horses の特徴量を作成（欠損値を含む行はNaNに設定）
    df["corner_1_per_horse"] = df["corner_1"].where(df["corner_1"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    
    df["corner_2_per_horse"] = df["corner_2"].where(df["corner_2"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    df["corner_3_per_horse"] = df["corner_3"].where(df["corner_3"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    df["corner_4_per_horse"] = df["corner_4"].where(df["corner_4"].notna(), np.nan) / df["n_horses"].where(df["n_horses"].notna(), np.nan)
    df["time_courselen"] = df["time"] / df["course_len"]

    # 月を抽出して開催シーズンを判定
    def determine_season(month):
        if 6 <= month <= 8:
            return "2" #"夏開催"
        elif month == 12 or 1 <= month <= 2:
            return "4" #"冬開催"
        elif 3 <= month <= 5:
            return "1" #"春開催"
        elif 9 <= month <= 11:
            return "3" #"秋開催"    


    df["race_type"] = df["race_type"].astype(str)

    df["season"] = df["date"].dt.month.map(determine_season)

    # 開催地とシーズンを組み合わせた新しいカテゴリを作成
    df["place_season"] = df["place"].astype(str) + df["season"]
    #芝/ダートを紐付け、ダ0芝1障2
    df["place_season_type"] = df["place_season"] + df["race_type"]

    df["day"] = df["day"].astype(str)

    df["day_season"] =  df["day"] + df["season"]
    df["day_season"] =  df["day_season"].astype(int)
    df["day"] = df["day"].astype(int)
    


    # 月を抽出して開催シーズンを判定
    def determine_season_turf(month):
        if 6 <= month <= 8:
            return "1" #"夏開催"
        elif month == 12 or 1 <= month <= 2:
            return "4" #"冬開催"
        elif 3 <= month <= 5:
            return "1" #"春開催"
        elif 9 <= month <= 11:
            return "2" #"秋開催"      
    
    df["season_turf"] = df["date"].dt.month.map(determine_season_turf)
    df["day"] = df["day"].astype(str)

    df["day_season_turf"] =  df["day"] + df["season_turf"]
    df["day_season_turf"] =  df["day_season_turf"].astype(int)
    df["day"] = df["day"].astype(int)

    df["season_turf"] = df["season_turf"].astype(float)

    # 開催_季節_開催コンディション_レースタイプを表示
    df["place_season_condition_type"] = df["place_season"] + df["race_type"]


    # コース別の馬場レベルを対応させる
    """
    オール野芝 ▶︎最も軽い芝で、速い時計が出やすい
    軽い芝 ▶︎時計面では野芝に劣るものの、こちらも速い時計が出やすい
    オーバーシード ▶︎ケースバイケース
    重い芝 ▶︎馬場が重く、時計もかかりやすい
    非常に重い芝 ▶︎JRA10場の中で最も重く、時計もかかりやすい

    オール野芝5	 '10111','10211',   小倉(夏)	'6311',中山(秋)	 '9311',   阪神(秋)	 '4111',  '4211',  '4311', '4411', 
    新潟	 '7311',   中京(秋)		
    軽い芝4	 '5111', '5211',  '5311',  '5411', 
    東京	 '8111',  '8211', '8311',   京都	'4121','4221','4321', '4421',  新潟	'10121','10221','小倉(夏)	 '6321', ' 中山(秋)	'9321', 阪神(秋)	'7321', 中京(秋)
    オーバーシード3	'5121','5221','5321','5421',  東京	'8121','8221', '8321',京都	 '9111',  '9211', '9411', 阪神	 '3111', '3211',  '3311', '3411', 
    福島	'7111',  '7211',  '7411', 中京	'6111',  '6211',  '6411',  中山	'10311','10411'小倉(冬)
    重い芝2	'9121','9221','9421',阪神	'6121','6221','6421',中山	'7121','7221','7421',中京	'3121', '3221','3321', '3421',  福島	'8411', '8421'京都(冬)	 '10321', '10421'小倉(冬)	
    非常に重い芝1	 '2111', '2121', '2211', '2221', '2311', '2321', '2411', '2421',  
    函館	'1111', '1121', '1211', '1221', '1311', '1321', '1411', '1421',  札幌					

    令和版ダートコースの馬場レベル表
    軽いダート-1	 '5110', '5120', '5210', '5220', '5310', '5320', '5410', '5420',東京	 '8110', '8120', '8210', '8220', '8310', '8320', '8410', '8420', 京都				
    重いダート-2	'1110', '1120', '1210', '1220', '1310', '1320', '1410', '1420', 札幌	'2110', '2120', '2210', '2220', '2310', '2320', '2410', '2420',函館	   '10110', '10120', '10210', '10220', '10310', '10320', '10410', '10420'小倉	'3110', '3120', '3210', '3220', '3310', '3320', '3410', '3420',福島	'4110', '4120', '4210', '4220', '4310', '4320', '4410', '4420',新潟	 '9110', '9120', '9210', '9220', '9310', '9320', '9410', '9420', 阪神
    非常に重いダート-3	'7110', '7120', '7210', '7220', '7310', '7320', '7410', '7420', 中京	'6110', '6120', '6210', '6220', '6310', '6320', '6410', '6420', 中山				
    障害レースはその他0
    """


    conversion_map = {
        '1011': 5, '1021': 5, '631': 5, '931': 5, '411': 5, '421': 5, '431': 5, '441': 5, '731': 5,
        
        '511': 4, '521': 4, '531': 4, '541': 4, '811': 4, '821': 4, '831': 4, 
        '631': 4, 
        
        '911': 3, '921': 3, '941': 3,
        '311': 3, '321': 3, '331': 3, '341': 3, '711': 3, '721': 3, '741': 3, '611': 3, '621': 3, '641': 3,
        '1031': 3, '1041': 3,
        
        '611': 2, '621': 2, '641': 2, 
        '841': 2, '841': 2, 
        
        '211': 1, '221': 1, '231': 1, '241': 1, 
        '111': 1, '121': 1, '131': 1, '141': 1,
        
        '510': -1, '520': -1, '530': -1, '540': -2,
        '810': -1, '820': -1, '830': -1, '840': -2,
        '110': -2, '120': -2, '130': -2, '140': -3,
        '210': -2, '220': -2, '230': -2, '240': -3,
        '1010': -2, '1020': -2, '1030': -2, '1040': -3,
        '310': -2, '320': -2, '330': -2, '340': -3,
        '410': -2, '420': -2, '430': -2, '440': -3,
        '910': -2, '920': -2, '930': -2, '940': -3,
        '710': -3, '720': -3, '730': -3, '740': -4,
        '610': -3, '620': -3, '630': -3, '640': -4,

        '3010': -3, '3020': -3, '3030': -3, '3040': -4, 
        '3510': -3, '3520': -3, '3530': -3, '3540': -4, 
        '3610': -3, '3620': -3, '3630': -3, '3640': -4, 
        '4210': -3, '4220': -3, '4230': -3, '4240': -4,
        '4310': -2, '4320': -2, '4330': -2, '4340': -3, 
        '4410': -1, '4420': -1, '4430': -1, '4440': -2, 
        '4510': -1, '4520': -1, '4530': -1, '4540': -2, 
        '4610': -3, '4620': -3, '4630': -3, '4640': -4, 
        '4710': -2, '4720': -2, '4730': -2, '4740': -3, 
        '4810': -2, '4820': -2, '4830': -2, '4840': -3,
        '5010': -3, '5020': -3, '5030': -3, '5040': -4, 
        '5410': -3, '5420': -3, '5430': -3, '5440': -4, 
        '5110': -3, '5120': -3, '5130': -3, '5140': -4, 
        '5510': -1, '5520': -1, '5530': -1, '5540': -2
    }

    df['place_season_condition_type_categori'] = df['place_season_condition_type'].map(conversion_map).fillna(-10000).astype(int)
    df['place_season_condition_type_categori'] = df['place_season_condition_type_categori'].replace(-10000, np.nan)



    df["place"] = df["place"].astype(int)
    df["course_len"] = df["course_len"].astype(int)

    df["race_type"] = df["race_type"].astype(int)

    #芝のコース詳細データ
    classification_map = {
        9: {  # 阪神
            "内": [1200, 1400, 2000, 2200, 3000, 3200],
            "外": [1400, 1600, 1800, 2400, 2600],
        },
        8: {  # 京都
            "内": [1100, 1200],
            "外": [1800, 2200, 2400, 3000, 3200],
            "内外": [1400, 1600, 2000],
        },
        4: {  # 新潟
            "内": [1200, 1400, 2000, 2200, 2400],
            "外": [1400, 1600, 1800, 2000, 3000, 3200],
            "内外": [],
            "直線": [1000],
        },
        6: {  # 中山
            "内": [1800, 2000, 2500, 3600],
            "外": [1200, 1600, 2200, 2600, 4000],
            "内外": [3200],
        }
    }
    """
    阪神内
    1,200m、1,400m、2,000m
    2,200m、3,000m、3,200m

    阪神外
    1,400m、1,600m、1,800m
    2,400m、2,600m

    京都内
    1,100m(内)、1,200m(内)

    京都内・外
    1,400m(内・外)、1,600m(内・外)
    2,000m(内・外)

    京都外
    1,800m(外)
    2,200m(外)、2,400m(外)
    3,000m(外)、3,200m(外)

    新潟直線
    1,000m

    新潟内
    1,200m、1,400m
    2,000m、2,200m、2,400m

    新潟外
    1,400m、1,600m
    1,800m、2,000m、3,000m、3,200m

    中山内外
    3,200m（外・内）

    中山内
    1,800m（内）、2,000m（内）
    2,500m（内）、3,600m（内）

    中山外
    1,200m（外）、1,600m（外）
    2,200m（外）、2,600m（外）、4,000m（外）
    """
    # 修正された分類ロジック
    def classify_place_course(row):
        place = row["place"]
        course_len = row["course_len"]
        race_type = row["race_type"]  # 0: ダート, 1: 芝, 2: 障害
        
        # ダートまたは障害の場合は NaN を返す
        if race_type in [2]:
            return None
        if race_type in [0]:
            return place + 1000  
        
        place_map = classification_map.get(place, {})
        for category, distances in place_map.items():
            if course_len in distances:
                category_index = list(place_map.keys()).index(category) + 1
                return int(f"{place}{category_index:02d}")  # 整数で返す
        
        # 分類ルールに該当しない場合は競馬場データをそのまま返す
        return place
    df["place_course_category"] = df.apply(classify_place_course, axis=1)
    #-1を欠損値として扱いintに直す
    df["place_course_category"] = df["place_course_category"].fillna(-1).astype(int)


    """
    コース別タフ度（芝）
    軽い3	新潟	東京	京都外	阪神外
    中間2	京都内	小倉	福島	中京
    タフ1	阪神内	函館	中山	札幌
    """
    # コース別タフ度（芝）_変換ルール
    conversion_map = {
        401: 3, 402: 3, 404: 3, 5: 3, 802: 3, 902: 3,
        801: 2, 803: 2, 10: 2, 3: 2, 7: 2,
        901: 1, 2: 1, 6: 1, 601: 1, 602: 1, 1: 1
    }
    # 新しい列を追加
    df["place_course_tough"] = df["place_course_category"].map(conversion_map).fillna(-1).astype(int)

    """
    競馬場	直線/m	カーブ	ゴール前
    新潟直線	1000	nan	平坦
    新潟外	658.7	急	平坦
    東京	525.9	複合	緩坂
    阪神外	473.6	複合	急坂
    中京	412.5	スパ	急坂
    京都外	403.7	複合	平坦
    京都内・外	345	複合	平坦
    新潟内	358.7	急	平坦
    阪神内	356.5	複合	急坂
    京都内	328.4	複合	平坦
    中山内	310	小回	急坂
    中山外	310	複合	急坂
    中山内外	310	複合	急坂
    札幌	266.1	大回	平坦
    函館	262.1	小回	平坦
    福島	292	小スパ	平坦
    小倉	293	小スパ	平坦
    """

    # # 競馬場カテゴリと対応する直線、カーブ、ゴール前情報
    # conversion_map = {
    #     401: {"直線": 1000, "カーブ": "直線", "ゴール前": "平坦"},
    #     402: {"直線": 658.7, "カーブ": "急", "ゴール前": "平坦"},
    #     404: {"直線": 525.9, "カーブ": "複合", "ゴール前": "緩坂"},
    #     902: {"直線": 473.6, "カーブ": "複合", "ゴール前": "急坂"},
    #     801: {"直線": 412.5, "カーブ": "スパ", "ゴール前": "急坂"},
    #     802: {"直線": 403.7, "カーブ": "複合", "ゴール前": "平坦"},
    #     803: {"直線": 345, "カーブ": "複合", "ゴール前": "平坦"},
    #     901: {"直線": 358.7, "カーブ": "急", "ゴール前": "平坦"},
    #     601: {"直線": 310, "カーブ": "小回", "ゴール前": "急坂"},
    #     602: {"直線": 310, "カーブ": "複合", "ゴール前": "急坂"},
    #     603: {"直線": 310, "カーブ": "複合", "ゴール前": "急坂"},
    #     1: {"直線": 266.1, "カーブ": "大回", "ゴール前": "平坦"},
    #     2: {"直線": 262.1, "カーブ": "小回", "ゴール前": "平坦"},
    #     3: {"直線": 292, "カーブ": "小スパ", "ゴール前": "平坦"},
    #     10: {"直線": 293, "カーブ": "小スパ", "ゴール前": "平坦"}
    # }

    # # カーブとゴール前を数値に変換する辞書
    # curve_map = {
    #     "急": 1,
    #     "小回": 2,
    #     "小スパ": 3,
    #     "スパ": 4,
    #     "複合": 5,
    #     "直線": 0  # Noneのまま
    # }

    # goal_map = {
    #     "平坦": 1,        
    #     "緩坂": 2,
    #     "急坂": 3
    #     # None: None  # Noneのまま
    # }

    # conversion_map = {
    #     404: {"直線": 1000, "カーブ": 4, "ゴール前": 1},
    #     402: {"直線": 658.7, "カーブ": 1, "ゴール前": 1},
    #     5: {"直線": 525.9, "カーブ": 5, "ゴール前": 2},
    #     902: {"直線": 473.6, "カーブ": 5, "ゴール前": 3},
    #     7: {"直線": 412.5, "カーブ": 4, "ゴール前": 3},
    #     802: {"直線": 403.7, "カーブ": 5, "ゴール前": 1},
    #     803: {"直線": 345, "カーブ": 5, "ゴール前": 1},
    #     401: {"直線": 358.7, "カーブ": 1, "ゴール前": 1},
    #     901: {"直線": 356.5, "カーブ": 5, "ゴール前": 3},    
    #     801: {"直線": 328.4, "カーブ": 5, "ゴール前": 1},    
    #     601: {"直線": 310, "カーブ": 2, "ゴール前": 3},
    #     602: {"直線": 310, "カーブ": 5, "ゴール前": 3},
    #     603: {"直線": 310, "カーブ": 5, "ゴール前": 3},
    #     1: {"直線": 266.1, "カーブ": 5, "ゴール前": 1},
    #     2: {"直線": 262.1, "カーブ": 2, "ゴール前": 1},
    #     3: {"直線": 292, "カーブ": 3, "ゴール前": 1},
    #     10: {"直線": 293, "カーブ": 3, "ゴール前": 1},

    #     1001: {"直線": 264.3, "カーブ": 5, "ゴール前": 1},
    #     1002: {"直線": 256.0, "カーブ": 2, "ゴール前": 1},
    #     1003: {"直線": 267.3, "カーブ": 3, "ゴール前": 1},
    #     1004: {"直線": 353.9, "カーブ": 1, "ゴール前": 1},
    #     1005: {"直線": 501.6, "カーブ": 5, "ゴール前": 2},
    #     1006: {"直線": 308.0, "カーブ": 2, "ゴール前": 3},
    #     1007: {"直線": 410.7, "カーブ": 4, "ゴール前": 3},
    #     1008: {"直線": 329.1, "カーブ": 5, "ゴール前": 1},
    #     1009: {"直線": 325.5, "カーブ": 5, "ゴール前": 3},
    #     1010: {"直線": 291.3, "カーブ": 3, "ゴール前": 1}
    # }

    # # データフレームに変換情報を適用する関数
    # def convert_course(row):
    #     place_code = row["place_course_category"]  # 競馬場の数値コード
    #     if place_code in conversion_map:
    #         # 直線、カーブ、ゴール前の情報を取得
    #         course_info = conversion_map[place_code]
    #         # 列名を変更
    #         return pd.Series({
    #             "goal_range": course_info["直線"], 
    #             "curve": course_info["カーブ"], 
    #             "goal_slope": course_info["ゴール前"]
    #         })
    #     else:
    #         return pd.Series({"goal_range": None, "curve": None, "goal_slope": None})

    # # 競馬場カテゴリに基づく変換を追加
    # df[['goal_range', 'curve', 'goal_slope']] = df.apply(convert_course, axis=1)

    # df["goal_range_100"] = df["goal_range"]/100

    
    """
    コーナータイプ
    緩やかで大きなカーブ:5
    小回:2
    普通:3
    膨らみ小回り:4
    膨らみ形状:5
    df["course_type"] 
    = df["place"].astype(str)+ df["race_type"].astype(str) + df["course_len"].astype(str) + df["course_len_type"].astype(str) 

    スタート位置、ダート1 芝2

    """
    df["course_type"] = df["course_type"].astype(int)
    
    df["course_len_type"] = df["course_len_type"].astype(int)

    """
    東京中京の坂は実際の半分で記載、坂の場所が手前にあるため
    """
    conversion_map_course_type = {
        #ダート
        #札幌
        1010001:{"コーナー数": 2, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 284.00,"直線合計": 548, "コーナー合計m":452,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":147,"高低差":0.9,"幅":20.0,"最初坂":0.4,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":0.2},
        1010002:{"コーナー数": 2, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 284.00,"直線合計": 548, "コーナー合計m":452,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":147,"高低差":0.9,"幅":20.0,"最初坂":0.4,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":0.2},

        1017001:{"コーナー数": 4, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 240.00,"直線合計": 796, "コーナー合計m":904,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":0.5,"最終コーナー坂":0.2},
        1017002:{"コーナー数": 4, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,"最初直線": 240.00,"直線合計": 796, "コーナー合計m":904,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":0.5,"最終コーナー坂":0.2},

        1024001:{"コーナー数": 6, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 180.00,"直線合計": 1044, "コーナー合計m":1356,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0.3,"向正面坂":0.5,"最初コーナー坂":0,"最終コーナー坂":0.2},
        1024002:{"コーナー数": 6, "最終直線": 264, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 180.00,"直線合計": 1044, "コーナー合計m":1356,"コーナータイプ":4,"コーナーR12":147,"コーナーR34":147,"高低差":0.9,"幅":20.0,   "最初坂":0.3,"向正面坂":0.5,"最初コーナー坂":0,"最終コーナー坂":0.2},
        
        #函館
        2010001:{"コーナー数": 2, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 366.4,"直線合計": 626, "コーナー合計m":374,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},
        2010002:{"コーナー数": 2, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 366.4,"直線合計": 626, "コーナー合計m":374,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},

        2017001:{"コーナー数": 4, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 328.5,"直線合計": 952, "コーナー合計m":748,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":-1.5,"向正面坂":2,"最初コーナー坂":-1.4,"最終コーナー坂":-0.25},
        2017002:{"コーナー数": 4, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 328.5,"直線合計": 952, "コーナー合計m":748,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":-1.5,"向正面坂":2,"最初コーナー坂":-1.4,"最終コーナー坂":-0.25},

        2024001:{"コーナー数": 6, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 290.6,"直線合計": 1278, "コーナー合計m":1122,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},
        2024002:{"コーナー数": 6, "最終直線": 260, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 290.6,"直線合計": 1278, "コーナー合計m":1122,"コーナータイプ":2,"コーナーR12":107,"コーナーR34":147,"高低差":3.4,"幅":20.0,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":1.25,"最終コーナー坂":-0.25},

        #福島
        3010001:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 384.00,"直線合計": 780, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3010002:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 384.00,"直線合計": 780, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},

        3011501:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 2,    "最初直線": 484.00,"直線合計": 680, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3011502:{"コーナー数": 2, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 2,    "最初直線": 484.00,"直線合計": 680, "コーナー合計m":370,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},

        3017001:{"コーナー数": 4, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 338.5,"直線合計": 960, "コーナー合計m":740,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3017002:{"コーナー数": 4, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 338.5,"直線合計": 960, "コーナー合計m":740,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},

        3024001:{"コーナー数": 6, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 325.9,"直線合計": 1290, "コーナー合計m":1110,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3024002:{"コーナー数": 6, "最終直線": 296, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 325.9,"直線合計": 1290, "コーナー合計m":1110,"コーナータイプ":3,"コーナーR12":113,"コーナーR34":147,"高低差":2.1,"幅":20.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},


        #新潟
        4012001:{"コーナー数": 2, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線": 524.9,"直線合計": 879, "コーナー合計m":321,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.5,"最終コーナー坂":0},
        4012002:{"コーナー数": 2, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線": 524.9,"直線合計": 879, "コーナー合計m":321,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.5,"最終コーナー坂":0},

        4018001:{"コーナー数": 4, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 388.7,"直線合計": 1157, "コーナー合計m":643,"コーナータイプ":1,"コーナーR12":104,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.5,"最終コーナー坂":0},
        4018002:{"コーナー数": 4, "最終直線": 354, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 388.7,"直線合計": 1157, "コーナー合計m":643,"コーナータイプ":1,"コーナーR12":104,"コーナーR34":104,"高低差":0.5,"幅":20.0,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.5,"最終コーナー坂":0},

        #東京
        5013001:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":341.9,"直線合計": 844, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0.9,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5013002:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":341.9,"直線合計": 844, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0.9,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        
        5014001:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":441.9,"直線合計": 944, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-0.6,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5014002:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":441.9,"直線合計": 944, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-0.6,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},

        5016001:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25, "スタート位置": 2,    "最初直線":641.9,"直線合計": 1144, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-1,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5016002:{"コーナー数": 2, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 2,    "最初直線":641.9,"直線合計": 1144, "コーナー合計m":456,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":-1,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},

        5021001:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":236.1,"直線合計": 1188, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5021002:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":236.1,"直線合計": 1188, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":0,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},

        5024001:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":536.1,"直線合計": 1488, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":2.5,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},
        5024002:{"コーナー数": 4, "最終直線": 501, "ゴール前坂": 1.25,  "スタート位置": 1,    "最初直線":536.1,"直線合計": 1488, "コーナー合計m":912,"コーナータイプ":5,"コーナーR12":162,"コーナーR34":162,"高低差":2.5,"幅":25.0,   "最初坂":2.5,"向正面坂":0.9,"最初コーナー坂":-1.7,"最終コーナー坂":0},


        #中山
        6012001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 2,    "最初直線":502.6,"直線合計": 811, "コーナー合計m":389,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.5,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},
        6012002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 2,    "最初直線":502.6,"直線合計": 811, "コーナー合計m":389,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.5,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},

        6018001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":375.0,"直線合計": 1022, "コーナー合計m":778,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":3.5,"向正面坂":-3.5,"最初コーナー坂":0.7,"最終コーナー坂":-0.1},
        6018002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":375.0,"直線合計": 1022, "コーナー合計m":778,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":3.5,"向正面坂":-3.5,"最初コーナー坂":0.7,"最終コーナー坂":-0.1},

        6024001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":209.6,"直線合計": 1233, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-1,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},
        6024002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":209.6,"直線合計": 1233, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-1,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},

        6025001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":309.6,"直線合計": 1333, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.3,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},
        6025002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 2.3,  "スタート位置": 1,    "最初直線":309.6,"直線合計": 1333, "コーナー合計m":1167,"コーナータイプ":2,"コーナーR12":134,"コーナーR34":134,"高低差":4.4,"幅":20.0,   "最初坂":-3.3,"向正面坂":-3.5,"最初コーナー坂":-0.5,"最終コーナー坂":-0.1},


        #中京       
        7012001:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":407.7,"直線合計": 818, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7012002:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":407.7,"直線合計": 818, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7014001:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2, "スタート位置": 2,    "最初直線":607.7,"直線合計": 1018, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7014002:{"コーナー数": 2, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":607.7,"直線合計": 1018, "コーナー合計m":382,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.2,"向正面坂":-1.2,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7018001:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2, "スタート位置": 1,    "最初直線":291.8,"直線合計": 1103, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.5,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},
        7018001:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":291.8,"直線合計": 1103, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":1.5,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},

        7019001:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":391.80,"直線合計": 1203, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":2,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},
        7019002:{"コーナー数": 4, "最終直線": 410.7, "ゴール前坂": 1.2, "スタート位置": 1,    "最初直線":391.80,"直線合計": 1203, "コーナー合計m":697,"コーナータイプ":3,"コーナーR12":95,"コーナーR34":115,"高低差":3.4,"幅":25.0,   "最初坂":2,"向正面坂":-1.2,"最初コーナー坂":0,"最終コーナー坂":-1},


        #京都
        8012001:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":409.6,"直線合計": 739, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":2.2,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},
        8012002:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":409.6,"直線合計": 739, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":2.2,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},

        8014001:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線":609.6,"直線合計": 939, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},
        8014002:{"コーナー数": 2, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 2,    "最初直線":609.6,"直線合計": 939, "コーナー合計m":461,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":-2.2,"最終コーナー坂":0},
    
        8018001:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":285.8,"直線合計": 1055, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
        8018002:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":285.8,"直線合計": 1055, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
    
        8019001:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":385.8,"直線合計": 1155, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
        8019002:{"コーナー数": 4, "最終直線": 329, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":385.8,"直線合計": 1155, "コーナー合計m":745,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":122,"高低差":3.0,"幅":25.0,   "最初坂":0,"向正面坂":2.2,"最初コーナー坂":0.2,"最終コーナー坂":0},
    

        #阪神
        9012001:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":343.6,"直線合計": 696, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9012002:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":343.6,"直線合計": 696, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
    
        9014001:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":543.6,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9014002:{"コーナー数": 2, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":543.6,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
    
        9018001:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":298.2,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},
        9018002:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 1,    "最初直線":298.2,"直線合計": 896, "コーナー合計m":504,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},

        9020001:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":498.2,"直線合計": 1221, "コーナー合計m":779,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},
        9020002:{"コーナー数": 4, "最終直線": 353, "ゴール前坂": 1.2,  "スタート位置": 2,    "最初直線":498.2,"直線合計": 1221, "コーナー合計m":779,"コーナータイプ":4,"コーナーR12":112,"コーナーR34":159,"高低差":1.5,"幅":22.0,   "最初坂":1.2,"向正面坂":-0.4,"最初コーナー坂":-0,"最終コーナー坂":-0.5},


        #小倉
        10010001:{"コーナー数": 2, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 661, "コーナー合計m":339,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":-0.7,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
        10010002:{"コーナー数": 2, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 661, "コーナー合計m":339,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":-0.7,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
    
        10017001:{"コーナー数": 4, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":343.0,"直線合計": 1022, "コーナー合計m":678,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0.4,"向正面坂":-0.7,"最初コーナー坂":2.2,"最終コーナー坂":-0.3},
        10017002:{"コーナー数": 4, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":343.0,"直線合計": 1022, "コーナー合計m":678,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0.4,"向正面坂":-0.7,"最初コーナー坂":2.2,"最終コーナー坂":-0.3},
    
        10024001:{"コーナー数": 6, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1383, "コーナー合計m":1017,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
        10024002:{"コーナー数": 6, "最終直線": 291, "ゴール前坂": 0.5,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1383, "コーナー合計m":1017,"コーナータイプ":1,"コーナーR12":112,"コーナーR34":112,"高低差":2.9,"幅":24.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-1.2,"最終コーナー坂":-0.3},
    



        # "門別": 30,
        # "盛岡": 35,
        # "水沢": 36,
        # "浦和": 42,
        # "船橋": 43,
        # "大井": 44,
        # "川崎": 45,
        # "金沢": 46,
        # "笠松": 47,
        # "名古屋": 48,
        # "園田": 50,
        # "高知": 54,
        # "姫路": 51,
        # "佐賀": 55


        #門別
        30010001:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 720, "コーナー合計m":280,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30010002:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 720, "コーナー合計m":280,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30011001:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 820, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30011002:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 820, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":90,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        30012001:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":490.0,"直線合計": 920, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30012002:{"コーナー数": 2, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":490.0,"直線合計": 920, "コーナー合計m":370,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        30015001:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":168.0,"直線合計": 674, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30015002:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":168.0,"直線合計": 674, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30016001:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":268.0,"直線合計": 774, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30016002:{"コーナー数": 4, "最終直線": 218, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":268.0,"直線合計": 774, "コーナー合計m":736,"コーナータイプ":3,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30017001:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":258.0,"直線合計": 988, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30017002:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":258.0,"直線合計": 988, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30018001:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30018002:{"コーナー数": 4, "最終直線": 330, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        30020001:{"コーナー数": 4, "最終直線": 530, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        30020002:{"コーナー数": 4, "最終直線": 530, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":358.0,"直線合計": 1088, "コーナー合計m":738,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":97,"高低差":1.54,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},


        #盛岡

        35010001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 580, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.25,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35010002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 580, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.25,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        35012001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":480.0,"直線合計": 780, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35012002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":480.0,"直線合計": 780, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        35014001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":680.0,"直線合計": 980, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35014002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":680.0,"直線合計": 980, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        35016001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":880.0,"直線合計": 1180, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35016002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":880.0,"直線合計": 1180, "コーナー合計m":420,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2.5,"向正面坂":0,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        
        35018001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},
        35018002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1.5,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},

        35020001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},
        35020002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":800,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":2,"向正面坂":2,"最初コーナー坂":0,"最終コーナー坂":-2},

        35025001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 1280, "コーナー合計m":1220,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1,"向正面坂":2,"最初コーナー坂":-3.5,"最終コーナー坂":-2},
        35025002:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 1.5,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 1280, "コーナー合計m":1220,"コーナータイプ":4,"コーナーR12":88,"コーナーR34":88,"高低差":4.4,"幅":25,   "最初坂":1,"向正面坂":2,"最初コーナー坂":-3.5,"最終コーナー坂":-2},

        #盛岡芝
        35110001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":300,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},
        35110002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":300,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},
        
        35116001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},
        35116002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},

        35117001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},
        35117002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":600,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":2.5,"向正面坂":2.0,"最初コーナー坂":-0.5,"最終コーナー坂":-2.5},
    
        35124001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":900,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":2.0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},
        35124002:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":900,"コーナータイプ":3,"コーナーR12":80,"コーナーR34":80,"高低差":4.6,"幅":25,   "最初坂":1.5,"向正面坂":2.0,"最初コーナー坂":-4.5,"最終コーナー坂":-2},


        #水沢
        3608501:{"コーナー数": 2, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":317.0,"直線合計": 562, "コーナー合計m":288,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        3608502:{"コーナー数": 2, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":317.0,"直線合計": 562, "コーナー合計m":288,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
                
        36013001:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 762, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36013002:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 762, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        36014001:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 862, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36014002:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 862, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36016001:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1062, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36016002:{"コーナー数": 4, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1062, "コーナー合計m":576,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36018001:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":67.0,"直線合計": 929, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36018002:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":67.0,"直線合計": 929, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36019001:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":167.0,"直線合計": 1029, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36019002:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":167.0,"直線合計": 1029, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        36020001:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":267.0,"直線合計": 1129, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        36020002:{"コーナー数": 6, "最終直線": 245, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":267.0,"直線合計": 1129, "コーナー合計m":864,"コーナータイプ":2,"コーナーR12":76,"コーナーR34":76,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    

        #浦和
        4208001:{"コーナー数": 2, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 520, "コーナー合計m":280,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4208001:{"コーナー数": 2, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 520, "コーナー合計m":280,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42013001:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":220.0,"直線合計": 740, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42013002:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":220.0,"直線合計": 740, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42014001:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 840, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42014002:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 840, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42015001:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":420.0,"直線合計": 940, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42015002:{"コーナー数": 4, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":420.0,"直線合計": 940, "コーナー合計m":560,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42016001:{"コーナー数": 5, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 940, "コーナー合計m":660,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42016002:{"コーナー数": 5, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":180.0,"直線合計": 940, "コーナー合計m":660,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42019001:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1060, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42019002:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1060, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        42020001:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1160, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        42020002:{"コーナー数": 6, "最終直線": 220, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1160, "コーナー合計m":840,"コーナータイプ":3,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        

        #船橋
        4308001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 448, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,  "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4308002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 448, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43010001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 648, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43010002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 648, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        43012001:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 848, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43012002:{"コーナー数": 2, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 848, "コーナー合計m":352,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        43014001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":126.0,"直線合計": 796, "コーナー合計m":604,"コーナータイプ":4,"コーナーR12":91,"コーナーR34":91,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43014002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":126.0,"直線合計": 796, "コーナー合計m":604,"コーナータイプ":4,"コーナーR12":91,"コーナーR34":91,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        43015001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":226.0,"直線合計": 896, "コーナー合計m":604,"コーナータイプ":4,"コーナーR12":91,"コーナーR34":91,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43015002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":126.0,"直線合計": 796, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43016001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":226.0,"直線合計": 896, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43016002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":226.0,"直線合計": 896, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43017001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":326.0,"直線合計": 996, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43017002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":326.0,"直線合計": 996, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43018001:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":426.0,"直線合計": 1096, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43018002:{"コーナー数": 4, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":426.0,"直線合計": 1096, "コーナー合計m":704,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43020001:{"コーナー数": 5, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":492.0,"直線合計": 1262, "コーナー合計m":870,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43020002:{"コーナー数": 5, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":492.0,"直線合計": 1262, "コーナー合計m":870,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43022001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 1222, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43022002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 1222, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        43024001:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1422, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        43024002:{"コーナー数": 6, "最終直線": 308, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1422, "コーナー合計m":1178,"コーナータイプ":4,"コーナーR12":99,"コーナーR34":99,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        


        #大井

        44010001:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 629, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44010002:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 629, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44012001:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":443.0,"直線合計": 829, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44012002:{"コーナー数": 2, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":443.0,"直線合計": 829, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44014001:{"コーナー数": 3, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1029, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":51,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44014002:{"コーナー数": 3, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":200.0,"直線合計": 1029, "コーナー合計m":371,"コーナータイプ":4,"コーナーR12":51,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44015001:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 912, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44015002:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 912, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44016001:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1012, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44016002:{"コーナー数": 4, "最終直線": 286, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1012, "コーナー合計m":588,"コーナータイプ":5,"コーナーR12":123,"コーナーR34":123,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        44016501:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 1029, "コーナー合計m":674,"コーナータイプ":5,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44016502:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":243.0,"直線合計": 1029, "コーナー合計m":674,"コーナータイプ":5,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        44017001:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 1026, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44017002:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 1026, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        44018001:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1126, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44018002:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":340.0,"直線合計": 1126, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        44020001:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 1326, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        44020002:{"コーナー数": 4, "最終直線": 386, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":540.0,"直線合計": 1326, "コーナー合計m":674,"コーナータイプ":4,"コーナーR12":102,"コーナーR34":102,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},


        #川崎
        4509001:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":200,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4509002:{"コーナー数": 2, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 700, "コーナー合計m":200,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        45014001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45014002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1000, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        45015001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45015002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1100, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        45016001:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45016002:{"コーナー数": 4, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":500.0,"直線合計": 1200, "コーナー合計m":400,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        45020001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1400, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45020002:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 1400, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        45021001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        45021001:{"コーナー数": 6, "最終直線": 300, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":400.0,"直線合計": 1500, "コーナー合計m":600,"コーナータイプ":1,"コーナーR12":81,"コーナーR34":81,"高低差":0,"幅":25,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        #金沢
        4609001:{"コーナー数": 2, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 522, "コーナー合計m":378,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4609002:{"コーナー数": 2, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 522, "コーナー合計m":378,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46013001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":166.0,"直線合計": 688, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46013001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":166.0,"直線合計": 688, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46014001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":266.0,"直線合計": 788, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46014002:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":266.0,"直線合計": 788, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46015001:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":366.0,"直線合計": 888, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46015002:{"コーナー数": 4, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":366.0,"直線合計": 888, "コーナー合計m":612,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46017001:{"コーナー数": 5, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 949, "コーナー合計m":751,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46017002:{"コーナー数": 5, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 949, "コーナー合計m":751,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        46019001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":86.0,"直線合計": 894, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46019001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":86.0,"直線合計": 894, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        46020001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":186.0,"直線合計": 994, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46020002:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":186.0,"直線合計": 994, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        46021001:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 1094, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46021002:{"コーナー数": 6, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":286.0,"直線合計": 1094, "コーナー合計m":1006,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        46023001:{"コーナー数": 7, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 1105, "コーナー合計m":1195,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        46023002:{"コーナー数": 7, "最終直線": 236, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":161.0,"直線合計": 1105, "コーナー合計m":1195,"コーナータイプ":1,"コーナーR12":77,"コーナーR34":77,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},


        
        #笠松

        4708001:{"コーナー数": 2, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 452, "コーナー合計m":348,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4708002:{"コーナー数": 2, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 452, "コーナー合計m":348,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47014001:{"コーナー数": 4, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 704, "コーナー合計m":696,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47014002:{"コーナー数": 4, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 704, "コーナー合計m":696,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47016001:{"コーナー数": 5, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 730, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47016002:{"コーナー数": 5, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 730, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        47018001:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":151.0,"直線合計": 756, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47018002:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":151.0,"直線合計": 756, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47019001:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 856, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47019002:{"コーナー数": 6, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":251.0,"直線合計": 856, "コーナー合計m":1044,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        47025001:{"コーナー数": 8, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 1108, "コーナー合計m":1392,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        47025002:{"コーナー数": 8, "最終直線": 201, "ゴール前坂": -1.92,  "スタート位置": 1,    "最初直線":252.0,"直線合計": 1108, "コーナー合計m":1392,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1.92,"幅":20,   "最初坂":-1.92,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        


        #名古屋
        4809001:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 610, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4809002:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 610, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        4809201:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 630, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4809202:{"コーナー数": 2, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 630, "コーナー合計m":290,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48014001:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 820, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48014002:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":280.0,"直線合計": 820, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48015001:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":380.0,"直線合計": 920, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48015002:{"コーナー数": 4, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":380.0,"直線合計": 920, "コーナー合計m":580,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48017001:{"コーナー数": 5, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":135.0,"直線合計": 975, "コーナー合計m":725,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48017002:{"コーナー数": 5, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":135.0,"直線合計": 975, "コーナー合計m":725,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48020001:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 1130, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48020002:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":290.0,"直線合計": 1130, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        48021001:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 1230, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        48021002:{"コーナー数": 6, "最終直線": 240, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 1230, "コーナー合計m":870,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":0,"幅":30,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        

        #園田
        5008201:{"コーナー数": 2, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 538, "コーナー合計m":282,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        5008202:{"コーナー数": 2, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 538, "コーナー合計m":282,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        
        50012301:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":207.0,"直線合計": 666, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        50012302:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":207.0,"直線合計": 666, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        
        50014001:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":407.0,"直線合計": 866, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        50014002:{"コーナー数": 4, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":407.0,"直線合計": 866, "コーナー合計m":564,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":0,"向正面坂":1.23,"最初コーナー坂":0,"最終コーナー坂":-1.23},
        
        50017001:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":155.0,"直線合計": 854, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        50017002:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":155.0,"直線合計": 854, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        
        50018701:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 1024, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        50018702:{"コーナー数": 6, "最終直線": 213, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":325.0,"直線合計": 1024, "コーナー合計m":846,"コーナータイプ":1,"コーナーR12":66,"コーナーR34":66,"高低差":1.2,"幅":20,   "最初坂":1.23,"向正面坂":0,"最初コーナー坂":1.23,"最終コーナー坂":-1.23},
        


        #高知
        5408001:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 440, "コーナー合計m":360,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        5408002:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 440, "コーナー合計m":360,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        
        54010001:{"コーナー数": 3, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 500, "コーナー合計m":500,"コーナータイプ":4,"コーナーR12":35,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        54010002:{"コーナー数": 3, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 500, "コーナー合計m":500,"コーナータイプ":4,"コーナーR12":35,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        
        54013001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 640, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        54013002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 640, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        
        54014001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":310.0,"直線合計": 740, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        54014002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":310.0,"直線合計": 740, "コーナー合計m":660,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.798},
        
        54016001:{"コーナー数": 5, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":100.0,"直線合計": 760, "コーナー合計m":840,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":-0.79,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        54016002:{"コーナー数": 5, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":100.0,"直線合計": 760, "コーナー合計m":840,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":-0.79,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        
 
        54018001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 800, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        54018002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":140.0,"直線合計": 800, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        
        54019001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 900, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        54019002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":240.0,"直線合計": 900, "コーナー合計m":1000,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":-0.79,"最終コーナー坂":-0.79},
        
        54021001:{"コーナー数": 7, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 960, "コーナー合計m":1140,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        54021002:{"コーナー数": 7, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":300.0,"直線合計": 960, "コーナー合計m":1140,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0.6,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":-0.79},
        
        54024001:{"コーナー数": 8, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 1080, "コーナー合計m":1320,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        54024002:{"コーナー数": 8, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":210.0,"直線合計": 1080, "コーナー合計m":1320,"コーナータイプ":4,"コーナーR12":70,"コーナーR34":80,"高低差":1.58,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0.79,"最終コーナー坂":-0.79},
        

        #姫路
        5108001:{"コーナー数": 2, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 550, "コーナー合計m":250,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        5108002:{"コーナー数": 2, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 550, "コーナー合計m":250,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        51014001:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":350.0,"直線合計": 900, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51014002:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":350.0,"直線合計": 900, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        51015001:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":450.0,"直線合計": 1000, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51015002:{"コーナー数": 4, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":450.0,"直線合計": 1000, "コーナー合計m":500,"コーナータイプ":3,"コーナーR12":85,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        51018001:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 1050, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51018002:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 1050, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        51020001:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1250, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        51020002:{"コーナー数": 6, "最終直線": 230, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":320.0,"直線合計": 1250, "コーナー合計m":750,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":80,"高低差":0,"幅":20,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
    
        #佐賀
        5509001:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 590, "コーナー合計m":310,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        5509002:{"コーナー数": 2, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":390.0,"直線合計": 590, "コーナー合計m":310,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55013001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 680, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55013002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 680, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        55014001:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":330.0,"直線合計": 780, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55014002:{"コーナー数": 4, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":330.0,"直線合計": 780, "コーナー合計m":620,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55017501:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 820, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55017501:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":120.0,"直線合計": 820, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55018001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":170.0,"直線合計": 870, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55018002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":170.0,"直線合計": 870, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55018601:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 930, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55018602:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":230.0,"直線合計": 930, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        
        55020001:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 1070, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        55020002:{"コーナー数": 6, "最終直線": 200, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":370.0,"直線合計": 1070, "コーナー合計m":930,"コーナータイプ":1,"コーナーR12":70,"コーナーR34":70,"高低差":1,"幅":19.2,   "最初坂":0,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        




        #芝
        #札幌
        1112001:{"コーナー数": 2, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 410.0,"直線合計": 670, "コーナー合計m":530,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":-0.2,"最終コーナー坂":-0.1},
        1112002:{"コーナー数": 2, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 410.0,"直線合計": 670, "コーナー合計m":530,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":-0.2,"最終コーナー坂":-0.1},

        1115001:{"コーナー数": 3, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 170.0,"直線合計": 670, "コーナー合計m":830,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":0,"最終コーナー坂":-0.1},
        1115002:{"コーナー数": 3, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 170.0,"直線合計": 670, "コーナー合計m":830,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":0,"最終コーナー坂":-0.1},

        1118001:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 180.0,"直線合計": 740, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
        1118002:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 180.0,"直線合計": 740, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
    
        1120001:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 380.0,"直線合計": 940, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.2,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
        1120002:{"コーナー数": 4, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 380.0,"直線合計": 940, "コーナー合計m":1060,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.2,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
    
        1126001:{"コーナー数": 6, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 160.0,"直線合計": 1010, "コーナー合計m":1590,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.3,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
        1126002:{"コーナー数": 6, "最終直線": 266, "ゴール前坂": 0,  "スタート位置": 1,   "最初直線": 160.0,"直線合計": 1010, "コーナー合計m":1590,"コーナータイプ":5,"コーナーR12":167,"コーナーR34":167,"高低差":0.6,"幅":20.0,      "最初坂":0.3,"向正面坂":0.3,"最初コーナー坂":-0.3,"最終コーナー坂":-0.1},
    

        #函館
        2110001:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":289.1,"直線合計": 552, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1.8,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},
        2110002:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":289.1,"直線合計": 552, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1.8,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},

        2112001:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":489.10,"直線合計": 752, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":2.1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},
        2112002:{"コーナー数": 2, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":489.10,"直線合計": 752, "コーナー合計m":448,"コーナータイプ":2,"コーナーR12":0,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":2.1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},

        2118001:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":275.80,"直線合計": 904, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.3,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},
        2118002:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":275.80,"直線合計": 904, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.3,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},

        2120001:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":475.8,"直線合計": 1104, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.7,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},
        2120002:{"コーナー数": 4, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":475.8,"直線合計": 1104, "コーナー合計m":896,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":-0.7,"向正面坂":2,"最初コーナー坂":-2,"最終コーナー坂":-0.4},

        2126001:{"コーナー数": 6, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":262.5,"直線合計": 1256, "コーナー合計m":1344,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},
        2126002:{"コーナー数": 6, "最終直線": 262, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線":262.5,"直線合計": 1256, "コーナー合計m":1344,"コーナータイプ":2,"コーナーR12":127,"コーナーR34":167,"高低差":3.4,"幅":29.0,   "最初坂":1,"向正面坂":2,"最初コーナー坂":1.4,"最終コーナー坂":-0.4},


        #福島
        3110001:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 502, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3110002:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 502, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},

        3112001:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 411.7,"直線合計": 702, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3112002:{"コーナー数": 2, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 411.7,"直線合計": 702, "コーナー合計m":498,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
    
        3117001:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 205.3,"直線合計": 825, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":0.5,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3117002:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 205.3,"直線合計": 825, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":0.5,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        
        3118001:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 305.3,"直線合計": 925, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3118002:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 305.3,"直線合計": 925, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
    
        3120001:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 505.3,"直線合計": 1125, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
        3120002:{"コーナー数":4, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 505.3,"直線合計": 1125, "コーナー合計m":875,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1,"向正面坂":1.7,"最初コーナー坂":-2,"最終コーナー坂":-0.8},
    
        3126001:{"コーナー数":6, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 1227, "コーナー合計m":1373,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
        3126002:{"コーナー数":6, "最終直線": 292, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 211.7,"直線合計": 1227, "コーナー合計m":1373,"コーナータイプ":3,"コーナーR12":133,"コーナーR34":167,"高低差":1.8,"幅":25.0,   "最初坂":1.3,"向正面坂":1.7,"最初コーナー坂":0,"最終コーナー坂":-0.8},
    

        #新潟
        4110001:{"コーナー数": 0, "最終直線": 1000, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 1000,"直線合計": 1000, "コーナー合計m":1,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":0,"高低差":1,"幅":25.0,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},
        4110002:{"コーナー数": 0, "最終直線": 1000, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線": 1000,"直線合計": 1000, "コーナー合計m":1,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":0,"高低差":1,"幅":25.0,   "最初坂":1.5,"向正面坂":0,"最初コーナー坂":0,"最終コーナー坂":0},

        4112001:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 444.9,"直線合計": 804, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
        4112002:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 444.9,"直線合計": 804, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
            
        4114001:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 644.9,"直線合計": 1004, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
        4114002:{"コーナー数": 2, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 644.9,"直線合計": 1004, "コーナー合計m":396,"コーナータイプ":1,"コーナーR12":0,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0,"最初コーナー坂":-0.3,"最終コーナー坂":0},
            
        4116001:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 547.9,"直線合計": 1207, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
        4116002:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 547.9,"直線合計": 1207, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
            
        4118001:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 747.9,"直線合計": 1407, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":0.2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
        4118002:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 747.9,"直線合計": 1407, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":0.2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
        
        4120001:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 436.4,"直線合計": 1208, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":0,"向正面坂":0.3,"最初コーナー坂":0.3,"最終コーナー坂":-0.3},
        
        4120002:{"コーナー数": 2, "最終直線": 659, "ゴール前坂": -1,  "スタート位置": 1,    "最初直線": 947.9,"直線合計": 1607, "コーナー合計m":393,"コーナータイプ":3,"コーナーR12":124,"コーナーR34":124,"高低差":2.2,"幅":25.0,   "最初坂":0.2,"向正面坂":2,"最初コーナー坂":-1.6,"最終コーナー坂":-0.3},
    
        4122001:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 636.4,"直線合計": 1408, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        4122002:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 636.4,"直線合計": 1408, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-0.2,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        
        4124001:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 836.4,"直線合計": 1608, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-1.7,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        4124002:{"コーナー数": 4, "最終直線": 359, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線": 836.4,"直線合計": 1608, "コーナー合計m":792,"コーナータイプ":1,"コーナーR12":124,"コーナーR34":124,"高低差":0.7,"幅":25.0,   "最初坂":-1.7,"向正面坂":0.3,"最初コーナー坂":0.1,"最終コーナー坂":-0.3},
        

        #東京
        5114001:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":342.7,"直線合計": 869, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        5114002:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":342.7,"直線合計": 869, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        
        5116001:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":542.7,"直線合計":1069, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        5116002:{"コーナー数": 2, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":542.7,"直線合計":1069, "コーナー合計m":531,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.7,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        
        5118001:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":156.6,"直線合計":1226, "コーナー合計m":574,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5118002:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":156.6,"直線合計":1226, "コーナー合計m":574,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5120001:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":126.2,"直線合計":1195, "コーナー合計m":805,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5120002:{"コーナー数": 3, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":126.2,"直線合計":1195, "コーナー合計m":805,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":-0.7,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5123001:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":249.5,"直線合計":1321, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5123002:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":249.5,"直線合計":1321, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5124001:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":349.5,"直線合計":1421, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5124002:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":349.5,"直線合計":1421, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":0,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5125001:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":449.5,"直線合計":1521, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":2,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        5125002:{"コーナー数": 4, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":449.5,"直線合計":1521, "コーナー合計m":979,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":2,"向正面坂":1.7,"最初コーナー坂":-0.7,"最終コーナー坂":0.3},
        
        5134001:{"コーナー数": 6, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":259.8,"直線合計":1890, "コーナー合計m":1510,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        5134002:{"コーナー数": 6, "最終直線": 526, "ゴール前坂": 1,  "スタート位置": 1,    "最初直線":259.8,"直線合計":1890, "コーナー合計m":1510,"コーナータイプ":5,"コーナーR12":187,"コーナーR34":187,"高低差":2.7,"幅":31.0,   "最初坂":1.5,"向正面坂":1.7,"最初コーナー坂":-1.7,"最終コーナー坂":0.3},
        


        #中山
        6112001:{"コーナー数": 2, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":275.1,"直線合計": 585, "コーナー合計m":615,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":-3.7,"向正面坂":-2,"最初コーナー坂":-1,"最終コーナー坂":-0.4},
        6112002:{"コーナー数": 2, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":275.1,"直線合計": 585, "コーナー合計m":615,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":-3.7,"向正面坂":-2,"最初コーナー坂":-1,"最終コーナー坂":-0.4},
        
        6116001:{"コーナー数": 3, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":239.8,"直線合計": 825, "コーナー合計m":775,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6116002:{"コーナー数": 3, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":239.8,"直線合計": 825, "コーナー合計m":775,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6118001:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":204.9,"直線合計": 885, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6118002:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":204.9,"直線合計": 885, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6120001:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":404.9,"直線合計": 1085, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6120002:{"コーナー数": 4, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":404.9,"直線合計": 1085, "コーナー合計m":915,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6122001:{"コーナー数": 5, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":432.3,"直線合計": 1017, "コーナー合計m":1183,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6122002:{"コーナー数": 5, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":432.3,"直線合計": 1017, "コーナー合計m":1183,"コーナータイプ":5,"コーナーR12":190,"コーナーR34":190,"高低差":5.3,"幅":24.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        
        6125001:{"コーナー数": 6, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":192.0,"直線合計": 1277, "コーナー合計m":1223,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":0,"向正面坂":-2,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        6125002:{"コーナー数": 6, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":192.0,"直線合計": 1277, "コーナー合計m":1223,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":0,"向正面坂":-2,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        
        6136001:{"コーナー数": 8, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":337.7,"直線合計": 1776, "コーナー合計m":1824,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},
        6136002:{"コーナー数": 8, "最終直線": 310, "ゴール前坂": 3,  "スタート位置": 1,    "最初直線":337.7,"直線合計": 1776, "コーナー合計m":1824,"コーナータイプ":2,"コーナーR12":154,"コーナーR34":154,"高低差":5.3,"幅":20.0,   "最初坂":2,"向正面坂":-2,"最初コーナー坂":2,"最終コーナー坂":-0.4},


        #中京
        7112001:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":315.5,"直線合計": 728, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":-0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7112002:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":315.5,"直線合計": 728, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":-0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7113001:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7113002:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7114001:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":515.5,"直線合計": 928, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7114002:{"コーナー数": 2, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":515.5,"直線合計": 928, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},

        7116001:{"コーナー数": 3, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":199.0,"直線合計": 1028, "コーナー合計m":572,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":0.5,"最終コーナー坂":-1},
        7116002:{"コーナー数": 3, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":199.0,"直線合計": 1028, "コーナー合計m":572,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":0.5,"最終コーナー坂":-1},

        7120001:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":314.1,"直線合計": 1142, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},
        7120002:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":314.1,"直線合計": 1142, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},

        7122001:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":514.1,"直線合計": 1342, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},
        7122002:{"コーナー数": 4, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":514.1,"直線合計": 1342, "コーナー合計m":858,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":2,"向正面坂":-0.6,"最初コーナー坂":0.2,"最終コーナー坂":-1},

        7130001:{"コーナー数": 6, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},
        7130002:{"コーナー数": 6, "最終直線": 412.5, "ゴール前坂": 1.6,  "スタート位置": 1,    "最初直線":415.5,"直線合計": 828, "コーナー合計m":472,"コーナータイプ":4,"コーナーR12":120,"コーナーR34":140,"高低差":3.5,"幅":28.0,   "最初坂":0.5,"向正面坂":-0.6,"最初コーナー坂":-1.4,"最終コーナー坂":-1},


        #京都
        8112001:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":316.2,"直線合計": 644, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":3,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        8112002:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":316.2,"直線合計": 644, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":3,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        
        8114001:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":516.2,"直線合計": 844, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        
        8114002:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":511.7,"直線合計": 916, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},
        
        8116001:{"コーナー数": 2, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":716.2,"直線合計": 1044, "コーナー合計m":556,"コーナータイプ":4,"コーナーR12":0,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        
        8116002:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":711.7,"直線合計":1116, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},

        8118001:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":911.7,"直線合計":1316, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},
        8118002:{"コーナー数": 2, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":911.7,"直線合計":1316, "コーナー合計m":484,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0,"向正面坂":4,"最初コーナー坂":-3.7,"最終コーナー坂":-0.4},

        8120001:{"コーナー数": 4, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":308.7,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":4,"コーナーR12":130,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},
        8120002:{"コーナー数": 4, "最終直線": 328, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":308.7,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":4,"コーナーR12":130,"コーナーR34":150,"高低差":3.1,"幅":28.0,   "最初坂":0,"向正面坂":3,"最初コーナー坂":-3,"最終コーナー坂":-0.3},

        8122001:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":397.3,"直線合計":1339, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        8122002:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":397.3,"直線合計":1339, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},

        8124001:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":597.3,"直線合計":1539, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},
        8124002:{"コーナー数": 4, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":597.3,"直線合計":1539, "コーナー合計m":861,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":0.2,"向正面坂":4,"最初コーナー坂":0,"最終コーナー坂":-0.4},

        8130001:{"コーナー数": 6, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":217.4,"直線合計":1655, "コーナー合計m":1345,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":3,"向正面坂":4,"最初コーナー坂":-3,"最終コーナー坂":-0.4},
        8130002:{"コーナー数": 6, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":217.4,"直線合計":1655, "コーナー合計m":1345,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":3,"向正面坂":4,"最初コーナー坂":-3,"最終コーナー坂":-0.4},

        8132001:{"コーナー数": 6, "最終直線": 404.0, "ゴール前坂": 0.2,  "スタート位置": 1,    "最初直線":417.4,"直線合計":1855, "コーナー合計m":1345,"コーナータイプ":5,"コーナーR12":130,"コーナーR34":190,"高低差":4.3,"幅":28.0,   "最初坂":4,"向正面坂":4,"最初コーナー坂":-3,"最終コーナー坂":-0.4},
        

        #阪神
        9112001:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":258.2,"直線合計": 615, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-0.2,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9112002:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":258.2,"直線合計": 615, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-0.2,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
                    
        9114001:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":458.2,"直線合計": 815, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
        9114002:{"コーナー数": 2, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":458.2,"直線合計": 815, "コーナー合計m":585,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-0.5},
            
        9116001:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":444.4,"直線合計": 918, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":-0.2,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},
        9116002:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":444.4,"直線合計": 918, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":-0.2,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},

        9118001:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":644.4,"直線合計": 1118, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},
        9118002:{"コーナー数": 2, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":644.4,"直線合計": 1118, "コーナー合計m":682,"コーナータイプ":5,"コーナーR12":0,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":0,"向正面坂":0.4,"最初コーナー坂":-0.2,"最終コーナー坂":-2.2},

        9120001:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":330.5,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
        9120002:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":330.5,"直線合計": 1067, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
            
        9122001:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":530.5,"直線合計": 1267, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
        9122002:{"コーナー数": 4, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":530.5,"直線合計": 1267, "コーナー合計m":933,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":-1.9,"向正面坂":-0.4,"最初コーナー坂":0,"最終コーナー坂":-1.8},
        
        9124001:{"コーナー数": 4, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":309.0,"直線合計": 1370, "コーナー合計m":1030,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":1.9,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":-2.2},
        9124002:{"コーナー数": 4, "最終直線": 474, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":309.0,"直線合計": 1370, "コーナー合計m":1030,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":192,"高低差":2.3,"幅":24.0,   "最初坂":1.9,"向正面坂":0.4,"最初コーナー坂":0,"最終コーナー坂":-2.2},

        9130001:{"コーナー数": 6, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":369.2,"直線合計": 1482, "コーナー合計m":1518,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-1.8},
        9130002:{"コーナー数": 6, "最終直線": 357, "ゴール前坂": 1.9,  "スタート位置": 1,    "最初直線":369.2,"直線合計": 1482, "コーナー合計m":1518,"コーナータイプ":5,"コーナーR12":133,"コーナーR34":170,"高低差":1.8,"幅":24.0,   "最初坂":0,"向正面坂":-0.4,"最初コーナー坂":-0.7,"最終コーナー坂":-1.8},
    
        
        #小倉
        10112001:{"コーナー数": 2, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	479.0,"直線合計":772, "コーナー合計m":428,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":-1,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3},
        10112002:{"コーナー数": 2, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	479.0,"直線合計":772, "コーナー合計m":428,"コーナータイプ":3,"コーナーR12":0,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":-1,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3},

        10117001:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	172.0,"直線合計":844, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},
        10117002:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	172.0,"直線合計":844, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},

        10118001:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	272.0,"直線合計":944, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},
        10118002:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	272.0,"直線合計":944, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},

        10120001:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	472.0,"直線合計":1144, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},
        10120002:{"コーナー数": 4, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	472.0,"直線合計":1144, "コーナー合計m":856,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":3,"最終コーナー坂":-0.3},

        10126001:{"コーナー数": 6, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	240.0,"直線合計":1326, "コーナー合計m":1274,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3},
        10126002:{"コーナー数": 6, "最終直線": 293, "ゴール前坂": 0,  "スタート位置": 1,    "最初直線":	240.0,"直線合計":1326, "コーナー合計m":1274,"コーナータイプ":3,"コーナーR12":136,"コーナーR34":136,"高低差":3.0,"幅":30.0,   "最初坂":0,"向正面坂":-0.7,"最初コーナー坂":-0.9,"最終コーナー坂":-0.3}
    }




    # データフレームに変換情報を適用する関数
    def convert_course(row):
        place_code = row["course_type"]  # 競馬場の数値コード
        if place_code in conversion_map_course_type:
            # 直線、カーブ、ゴール前の情報を取得
            course_info = conversion_map_course_type[place_code]
            # 列名を変更
            return pd.Series({
                "goal_range": course_info["最終直線"], 

                "curve": course_info["コーナータイプ"], 
                "goal_slope": course_info["ゴール前坂"],
                "curve_amount": course_info["コーナー数"], 

                "start_point": course_info["スタート位置"], 
                "start_range": course_info["最初直線"], 
                "straight_total": course_info["直線合計"], 
                "curve_total": course_info["コーナー合計m"],
                "curve_R12": course_info["コーナーR12"],
                "curve_R34": course_info["コーナーR34"],
                "height_diff": course_info["高低差"],
                "width": course_info["幅"],
                "start_slope": course_info["最初坂"],
                "flont_slope": course_info["向正面坂"],
                "first_curve_slope": course_info["最初コーナー坂"],
                "last_curve_slope": course_info["最終コーナー坂"]
            })
        else:
            return pd.Series({"goal_range": None, "curve": None, "goal_slope": None,"curve_amount":None,"start_point":None,"start_range":None,"straight_total":None,"curve_total":None,"curve_R12":None,"curve_R34":None,"height_diff":None,"width":None,"start_slope":None,"flont_slope":None,"first_curve_slope":None,"last_curve_slope":None})
    
    # 競馬場カテゴリに基づく変換を追加
    df[['goal_range', 'curve', 'goal_slope',"curve_amount","start_point","start_range","straight_total","curve_total","curve_R12","curve_R34","height_diff","width","start_slope","flont_slope","first_curve_slope","last_curve_slope"]] = df.apply(convert_course, axis=1)
    
    df["goal_range_100"] = df["goal_range"].astype(float)/100

    # # `course_type` に基づく情報を取得する関数
    # def convert_course(place_code):
    #     if place_code in conversion_map_course_type:
    #         # コース情報を取得
    #         course_info = conversion_map_course_type[place_code]
    #     else:
    #         # すべてのカラムを `None` にする辞書を作成
    #         keys = ["最終直線", "コーナー数", "コーナータイプ", "ゴール前坂", 
    #                 "スタート位置", "最初直線", "直線合計", "コーナー合計m", 
    #                 "コーナーR12", "コーナーR34", "高低差", "幅", "最初坂", 
    #                 "向正面坂", "最初コーナー坂", "最終コーナー坂"]
    #         course_info = dict.fromkeys(keys, None)
        
    #     # DataFrame 用に列名を統一
    #     return pd.Series({
    #         "goal_range": course_info["最終直線"], 
    #         "curve_amount": course_info["コーナー数"], 
    #         "curve": course_info["コーナータイプ"], 
    #         "goal_slope": course_info["ゴール前坂"],

    #         "start_point": course_info["スタート位置"], 
    #         "start_range": course_info["最初直線"], 
    #         "straight_total": course_info["直線合計"], 
    #         "curve_total": course_info["コーナー合計m"],
    #         "curve_R12": course_info["コーナーR12"],
    #         "curve_R34": course_info["コーナーR34"],
    #         "height_diff": course_info["高低差"],
    #         "width": course_info["幅"],
    #         "start_slope": course_info["最初坂"],
    #         "flont_slope": course_info["向正面坂"],
    #         "first_curve_slope": course_info["最初コーナー坂"],
    #         "last_curve_slope": course_info["最終コーナー坂"]
    #     })

    # # `map(pd.Series)` を使って DataFrame にマージ（高速化）
    # df = df.join(df["course_type"].map(convert_course))

    # # `goal_range` の値を100で割る（`NaN` に対応）
    # df["goal_range_100"] = pd.to_numeric(df["goal_range"], errors="coerce") / 100


    df = df.replace('None', pd.NA)






    columns_to_convert_x = [
        "goal_range", "curve", "goal_slope", "curve_amount", "start_point",
        "start_range", "straight_total", "curve_total", "curve_R12", "curve_R34",
        "height_diff", "width", "start_slope", "flont_slope",
        "first_curve_slope", "last_curve_slope"
    ]

    df[columns_to_convert_x] = df[columns_to_convert_x].fillna(0).astype(float)

    # # 'start_point'が2の行だけに対して処理を行う
    # df.loc[df["start_point"] == 2, "start_point"] = (df["umaban"]+(df["n_horses"] /2)) / df["n_horses"] 



    """
    ・noboriの策定
    ハイペースなら-,スローペースなら+


    のぼりやタイムは0.1秒単位で大事
    +-のほうがいいかも

    ハイローセット	
    レースグレードによる距離のハイペース	
    最初の直線が長いほど	（倍率は下げる）ハイペースになる
    コーナーの数が4以上だと、先行争い諦めることがあるので	若干スローに
    コーナーの数が4以上、直線の合計が1000を超えてくると	若干スローに
    短距離は	基本ハイペース
    最初直線＿上り平坦	スローペース
    最初下り坂	ペースが上がり
        
    12コーナーがきつい	スロー
    コーナーがきつい	スロー
    向正面上り坂	スロー
    内外セット	
    3,4コーナーが急	圧倒的内枠有利になる
    3,4が下り坂	圧倒的内枠有利になる
    スタートからコーナーまでの距離が短い	ポジションが取りづらいため、内枠有利特に偶数有利
    スタートが上りorくだり坂	ポジションが取りづらいため、内枠有利特に偶数有利
    コーナーがきついは内枠	内枠
    向正面上り坂は内枠	内枠
    芝スタートだと外が有利	外枠
    芝スタート系は道悪で逆転する	内枠
    距離が長いほど関係なくなる	関係なくなる
    ダートで内枠は不利	外枠

    """



    """
    ハイペースローペース自体の影響は0.5前後にまとまるよう下げる

    コーナー順位が前（先行）で、ハイペースの場合、noboriをさらに-0.5する（不利条件）
    前でローペースの場合、noboriを+0.2する(ペースによる)有利
    後ろで、ローペースの場合、noboriを-0.1する（作っておけばrankdiffで使える）不利
    後ろでハイの場合、noboriを+0.3する(ハイスローの分を相殺する)有利
    #+だとハイペース、ーだとスローペース





    """


    # #最大0.5前後
    # df["nobori_pace_diff"] = df["nobori"] - (df["pace_diff"] / 6)

    # #ハイペースが不利、だから補正する、最大0.05くらい
    # df["nobori_pace_diff_grade"] = df["nobori_pace_diff"] / ((df['race_grade'] + 10000)/10070)

    # #坂、0.2くらい
    # #芝が傷んでくる冬から春には、坂は効く

    # df["nobori_pace_diff_grade_slope"] = np.where(
    #     (df["season"] == 1) | (df["season"] == 4),
    #     df["nobori_pace_diff_grade"] / ((df["goal_slope"] + 300)/300),
    #     df["nobori_pace_diff_grade"] / ((df["goal_slope"] + 600)/600),
    # )

    # #直線の長さ0.2くらい
    # df["start_range_processed_1"] = (((df["start_range"])-360))
    # df["start_range_processed_1"] = df["start_range_processed_1"].apply(
    #     lambda x: x if x < 0 else x*1
    # )
    # df["start_range_processed_1"] = ((df["start_range_processed_1"] + 50000) / 50000)

    # df["goal_range_processed_1"] = (((df["goal_range"])-360))
    # df["goal_range_processed_1"] = df["goal_range_processed_1"].apply(
    #     lambda x: x*2 if x < 0 else x*0.5
    # )
    # df["goal_range_processed_1"] = ((df["goal_range_processed_1"] + 100000) / 100000)


    # #スタートが長いとハイペースなので上りが少し遅くなる
    # df["nobori_pace_diff_grade_slope_start_range"] = df["nobori_pace_diff_grade_slope"] / df["start_range_processed_1"]

    # #ゴールが短いと上りの分が入らないので上りが少し遅くなる
    # df["nobori_pace_diff_grade_slope_range"] = df["nobori_pace_diff_grade_slope_start_range"] * df["goal_range_processed_1"]

    # """
    # ハイスロー、脚質修正
    # コーナー順位が前（先行）で、ハイペースの場合、noboriをさらに-0.5する（不利条件）
    # 前でローペースの場合、noboriを+0.2する(ペースによる)有利
    # 後ろで、ローペースの場合、noboriを-0.1する（作っておけばrankdiffで使える）不利
    # 後ろでハイの場合、noboriを+0.3する(ハイスローの分を相殺する)有利
    # #+だとハイペース、ーだとスローペース
    # """
    # # 条件ごとに処理を適用
    # df["nobori_pace_diff_grade_slope_range_pace"] = np.where(
    #     ((df['race_position'] == 1) | (df['race_position'] == 2)) & (df["pace_diff"] >= 0),
    #     df["nobori_pace_diff_grade_slope_range"] - (df["pace_diff"] / 4),
        
    #     np.where(
    #         ((df['race_position'] == 1) | (df['race_position'] == 2)) & (df["pace_diff"] < 0),
    #         df["nobori_pace_diff_grade_slope_range"] - (df["pace_diff"] / 12),
            
    #         np.where(
    #             (df['race_position'] == 4) & (df["pace_diff"] < 0),
    #             df["nobori_pace_diff_grade_slope_range"] - ((df["pace_diff"] / 20) * -1),
                
    #             np.where(
    #                 ((df['race_position'] == 3) | (df['race_position'] == 4)) & (df["pace_diff"] >= 0),
    #                 df["nobori_pace_diff_grade_slope_range"] - ((df["pace_diff"] / 13) * -1),
    #                 df["nobori_pace_diff_grade_slope_range"]  # どの条件にも当てはまらない場合は元の値を保持
    #             )
    #         )
    #     )
    # )



    # """
    # 馬場状態
    # 普通に不良馬場なら-1.5
    # 稍重くらいなら-0.3

    # ダートなら逆で倍率は変わらず、
    # +1.2と+0.6くらいに
    # """

    # # 条件ごとに適用
    # df["nobori_pace_diff_grade_slope_range_pace_groundstate"] = np.where(
    #     ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 1),
    #     df["nobori_pace_diff_grade_slope_range_pace"] * (29/30),

    #     np.where(
    #         (df["ground_state"] == 2) & (df["race_type"] == 1),
    #         df["nobori_pace_diff_grade_slope_range_pace"] * (119/120),

    #         np.where(
    #             ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 0),
    #             df["nobori_pace_diff_grade_slope_range_pace"] * (41/40),

    #             np.where(
    #                 (df["ground_state"] == 2) & (df["race_type"] == 0),
    #                 df["nobori_pace_diff_grade_slope_range_pace"] * (81/80),
                    
    #                 # どの条件にも当てはまらない場合は元の値を保持
    #                 df["nobori_pace_diff_grade_slope_range_pace"]
    #             )
    #         )
    #     )
    # )




    # #タフが不利、だから補正する
    # """
    # タフパック	
    # ハイペース	タフ
    # コーナー種類	ゆるいと遅くならないのでタフ,だけどゆるいほうが早く出る  カーブが緩い、複合だと早いまま入れる

    # コーナーR	大きいとタフ
    # コーナーの数	少ないほうがタフ
    # 高低差がある	タフ
    # 馬場状態、天気が悪い	タフ
    # 芝によって	タフ
    # 直線合計/コーナー合計	多いほどタフ
    # """

    # # -4.5 を行う
    # df["curve_processed"] = df["curve"] - 4.5
    # # +の場合は数値を8倍する
    # df["curve_processed"] = df["curve_processed"].apply(
    #     lambda x: x * 8 if x > 0 else x
    # )
    # #最大0.12くらい
    # df["nobori_pace_diff_grade_curve"] = df["nobori_pace_diff_grade_slope_range_pace_groundstate"] * ((df["curve_processed"]+2000)/2000)






    # """"
    # "curve_amount"を2以下のとき"curve_R34"を
    # "curve_amount"を3以下のとき"curve_R12"/2と"curve_R34"を
    # "curve_amount"を4以下のとき"curve_R12"と"curve_R34"を
    # "curve_amount"を5以下のとき"curve_R12"と"curve_R34"*3/2を
    # "curve_amount"を6以下のとき"curve_R12"と"curve_R34"*2を
    # "curve_amount"を7以下のとき"curve_R12"*3/2と"curve_R34"*2を
    # "curve_amount"を8以下のとき"curve_R12"*2と"curve_R34"*2を
    # """
    # #最大0.02*n
    # def calculate_nobori_pace_diff(row):
    #     if row["curve_amount"] == 0:
    #         return row["nobori_pace_diff_grade_curve"]
    #     elif row["curve_amount"] <= 2:
    #         return row["nobori_pace_diff_grade_curve"] * ((row["curve_R34"]+100000)/100000)
    #     elif row["curve_amount"] <= 3:
    #         return row["nobori_pace_diff_grade_curve"] *  (((row["curve_R12"]+ row["curve_R34"])+100000)/100000)
    #     elif row["curve_amount"] <= 4:
    #         return row["nobori_pace_diff_grade_curve"] * (((row["curve_R12"]+ row["curve_R34"])+100000)/100000)
    #     elif row["curve_amount"] <= 5:
    #         return row["nobori_pace_diff_grade_curve"] * (((row["curve_R12"]+ row["curve_R34"] * 3 / 2)+100000)/100000)
    #     elif row["curve_amount"] <= 6:
    #         return row["nobori_pace_diff_grade_curve"] * (((row["curve_R12"]+ row["curve_R34"] * 2)+100000)/100000)
    #     elif row["curve_amount"] <= 7:
    #         return row["nobori_pace_diff_grade_curve"]* (((row["curve_R12"]* 3 / 2+ row["curve_R34"] * 2)+100000)/100000)
    #     else:  # curve_amount <= 8
    #         return row["nobori_pace_diff_grade_curve"] *  (((row["curve_R12"]* 2+ row["curve_R34"] * 2)+100000)/100000)

    # df["nobori_pace_diff_grade_curveR"] = df.apply(calculate_nobori_pace_diff, axis=1)

    # #最大0.09くらい
    # df["nobori_pace_diff_grade_curveR_height_diff"] = df["nobori_pace_diff_grade_curveR"] / ((df["height_diff"]+2000)/2000)

    # #芝の質で一秒くらい違う
    # #最大と最小で0,4:-0,4

    # df = df.copy()
    # df.loc[:, "place_season_condition_type_categori_processed"] = (
    #     df["place_season_condition_type_categori"]
    #     .replace({5: -0.3, 4: -0.17, 3: 0, 2: 0.17,1: 0.3, -1: -0.18, -2: 0, -3: 0.18,-4:0.3,-10000:0})
    # ).astype(float)



    # #最大0.5くらい
    # df["nobori_pace_diff_grade_curveR_height_diff_season"] = df["nobori_pace_diff_grade_curveR_height_diff"] - df['place_season_condition_type_categori_processed']


    # #最大0.05くらい
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight"] = df["nobori_pace_diff_grade_curveR_height_diff_season"] - (((df["straight_total"]/ df["course_len"])/10)-0.05)

    # # 1600で正規化
    # df["course_len_processed"] = (df["course_len"] / 1800)-1

    # # 1600m未満ならそのまま、1600m以上なら緩やかに上昇 
    # df["course_len_processed_1"] = df["course_len_processed"].apply(
    #     lambda x: x*0.2 if x <= 0 else x*0.1
    # )

    # #最大0.1くらい
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len"] = df["nobori_pace_diff_grade_curveR_height_diff_season_straight"] - df["course_len_processed_1"]






    # """
    # 内外セット	
    # 3,4コーナーが急	圧倒的内枠有利になる
    # 3,4が下り坂	圧倒的内枠有利になる
    # スタートからコーナーまでの距離が短い	ポジションが取りづらいため、内枠有利特に偶数有利
    # スタートが上りorくだり坂	ポジションが取りづらいため、内枠有利特に偶数有利
    # コーナーがきついは内枠	内枠
    # 向正面上り坂は内枠	内枠
    # 芝スタートだと外が有利	外枠
    # 芝スタート系は道悪で逆転する	内枠
    # 距離が長いほど関係なくなる	関係なくなる
    # ダートで内枠は不利	外枠
    # """

    # #0,01-0.01,内がマイナス
    # df["umaban_processed"] = df["umaban"].apply(
    #     lambda x: ((x*-1)) if x < 4 else (x-8)/6
    # ).astype(float)
    # #0-0.005
    # #1（奇数）または 0（偶数）
    # df.loc[:, "umaban_odd_processed"] = (
    #     (df["umaban_odd"]-1)
    # ).astype(float)

    # # 1600m未満ならそのまま、1600m以上なら緩やかに上昇 
    # df["course_len_processed_2"] = df["course_len_processed"].apply(
    #     lambda x: x+1 if x <= 0 else x+1
    # )

    # df["umaban_processed_2"] = df["umaban_processed"] / df["course_len_processed_2"]
    # df["umaban_odd_processed_2"] = df["umaban_odd_processed"] / df["course_len_processed_2"]


    # #最大0.03くらい、不利が+,ダートは外枠有利
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban"] = np.where(
    #     df["race_type"] == 0,
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len"] * ((df["umaban_processed_2"]+2000)/2000),
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len"] / ((df["umaban_processed_2"]+2000)/2000)
    # )

    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds"]= np.where(
    #     df["race_type"] == 0,
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban"] / ((df["umaban_odd_processed_2"]+2000)/2000),
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban"] / ((df["umaban_odd_processed_2"]+2000)/2000)
    # )



    # #+-0.03急カーブ,フリ評価
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve"] = (
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds"] / (((df["umaban_processed_2"]*(df["curve_processed"]/4))+2000)/2000)
    # )


    # #+-0.03カーブ下り坂,フリ評価
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope"] = (
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve"] / (((df["umaban_processed_2"]*(df["last_curve_slope"]/2))+2000)/2000)
    # )



    # df["start_range_processed"] = (((df["start_range"])-360)/150)
    # df["start_range_processed"] = df["start_range_processed"].apply(
    #     lambda x: x if x < 0 else x*0.5
    # )

    # #+-0.06,スタートからコーナー
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range"] = (
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope"] / (((df["umaban_processed_2"]*(df["start_range_processed"]))+2000)/2000)/ (((df["umaban_odd_processed_2"]*(df["start_range_processed"]))+2000)/2000)
    # )



    # df["start_slope_abs"] = df["start_slope"].abs()
    # df["start_slope_abs_processed"] = df["start_slope_abs"] /4

    # #+-0.06,スタートからコーナー、坂,上り下り両方
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] = (
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range"] / (((df["umaban_processed_2"]*(df["start_slope_abs_processed"]))+2000)/2000)/ (((df["umaban_odd_processed_2"]*( df["start_slope_abs_processed"]))+2000)/2000)
    # )




    # #最大0.3*nコーナーがきついは内枠
    # def calculate_nobori_pace_diff_2(row):
    #     if row["curve_amount"] == 0:
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"]
    #     elif row["curve_amount"] <= 2:
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] / (((row["umaban_processed_2"]*(((row["curve_R34"]-100)/450)*-1))+2000)/2000)
    #     elif row["curve_amount"] <= 3:
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] / (((row["umaban_processed_2"]*(((row["curve_R12"]-100)/450 / 2 + (row["curve_R34"]-100)/450)*-1))+2000)/2000)
    #     elif row["curve_amount"] <= 4:
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] / (((row["umaban_processed_2"]*(((row["curve_R12"]-100)/450 + ((row["curve_R34"]-100)/450))*-1))+2000)/2000)
    #     elif row["curve_amount"] <= 5:
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] / (((row["umaban_processed_2"]*(((row["curve_R12"]-100)/450 + ((row["curve_R34"]-100)/450) * 3 / 2)*-1))+2000)/2000)
    #     elif row["curve_amount"] <= 6:
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] /((((row["umaban_processed_2"]*((row["curve_R12"]-100)/450 + ((row["curve_R34"]-100)/450) * 2)*-1))+2000)/2000)
    #     elif row["curve_amount"] <= 7:
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] / (((row["umaban_processed_2"]*(((row["curve_R12"]-100)/450 * 3 / 2 + ((row["curve_R34"]-100)/450) * 2)*-1))+2000)/2000)
    #     else:  # curve_amount <= 8
    #         return row["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope"] / ((((row["umaban_processed_2"]*((row["curve_R12"]-100)/450 * 2 +((row["curve_R34"]-100)/450) * 2)*-1))+2000)/2000)


    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope_corner"] = df.apply(calculate_nobori_pace_diff_2, axis=1)


    # #最大1*向正面
    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope_corner_flont"] = (
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope_corner"] / ((((df["umaban_processed_2"]*(df["flont_slope"]/4)))+2000)/2000)
    # )


    # #芝スタートかつ良馬場、芝スタートかつ良以外、どっちでもない場合,外評価

    # condition = (df["start_point"] == 2) & (df["ground_state"] == 0)

    # df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope_corner_flont_point"] = np.where(
    #     condition,
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope_corner_flont"] / (((df["umaban_processed_2"] * -1)+2000)/2000),
    #     df["nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope_corner_flont"] / ((df["umaban_processed_2"]+2000)/2000)
    # )





    """
    有利不利		有利
		
    スタートの距離※	短い	先行
    スタートの坂	のぼり	先行
    スタート位置	芝スタート	外、道悪で逆
            
    最終コーナー形態※	きつい	内枠、先行
    最終コーナー坂※	下り	内枠、先行
            
    最終直線の距離※	短い	先行
    最終直線の坂	下り、平坦	先行
            
    馬場状態※	良い	内枠
    馬場状態	良い	先行
    ペース※	遅い	先行
            
    芝ダートの違い	ダート	先行
        芝	内
            
    高低差のタフ※	タフ	持続
    ハイペースのタフ		
    最初コーナーの大小	大きい	内枠
    """




    df = df.copy()
    df.loc[:, "place_season_condition_type_categori_processed"] = (
        df["place_season_condition_type_categori"]
        .replace({5: -0.3, 4: -0.17, 3: 0, 2: 0.17,1: 0.3, -1: -0.18, -2: 0, -3: 0.18,-4:0.3,-10000:0})
    ).astype(float)


    df["nobori_pace_diff"] = df["nobori"] - (df["pace_diff"] / 30) - (df["place_season_condition_type_categori"]/1.5)

    df["nobori_pace_diff_slope"] = np.where(
        (df["season"] == 1) | (df["season"] == 4),
        df["nobori_pace_diff"] / ((df["goal_slope"] + 400)/400),
        df["nobori_pace_diff"] / ((df["goal_slope"] + 700)/700),
    )


    df["goal_range_processed_1"] = (((df["goal_range"])-360))
    df["goal_range_processed_1"] = df["goal_range_processed_1"].apply(
        lambda x: x*2 if x < 0 else x*0.5
    )

    #ゴールが短いと上りの分が入らないので上りが少し遅くなる
    df["nobori_pace_diff_slope_range"] = df["nobori_pace_diff_slope"] * ((df["goal_range_processed_1"] + 50000) / 50000)/((df["height_diff"]+1000)/1000)


    """
    ハイスロー、脚質修正
    コーナー順位が前（先行）で、ハイペースの場合、noboriをさらに-0.5する（不利条件）
    前でローペースの場合、noboriを+0.2する(ペースによる)有利
    後ろで、ローペースの場合、noboriを-0.1する（作っておけばrankdiffで使える）不利
    後ろでハイの場合、noboriを+0.3する(ハイスローの分を相殺する)有利
    #+だとハイペース、ーだとスローペース
    """
    # 条件ごとに処理を適用
    df["nobori_pace_diff_slope_range_pace"] = np.where(
        ((df['race_position'] == 1)) & (df["pace_diff"] >= 0),
        df["nobori_pace_diff_slope_range"] - (df["pace_diff"] / 8),
        np.where(
                ((df['race_position'] == 2)) & (df["pace_diff"] >= 0),
                df["nobori_pace_diff_slope_range"] - (df["pace_diff"] / 40),
            
        
            np.where(
                ((df['race_position'] == 1) | (df['race_position'] == 2)) & (df["pace_diff"] < 0),
                df["nobori_pace_diff_slope_range"] - (df["pace_diff"] / 20),
                
                np.where(
                    ((df['race_position'] == 3) | (df['race_position'] == 4)) & (df["pace_diff"] < 0),
                    df["nobori_pace_diff_slope_range"] - ((df["pace_diff"] / 40) * -1),
                    
                    np.where(
                        ((df['race_position'] == 3) | (df['race_position'] == 4)) & (df["pace_diff"] >= 0),
                        df["nobori_pace_diff_slope_range"] - ((df["pace_diff"] / 40) * -1),
                        df["nobori_pace_diff_slope_range"]  # どの条件にも当てはまらない場合は元の値を保持
                    )
                )
            )
        )
    )

    # 条件ごとに適用
    df["nobori_pace_diff_slope_range_groundstate"] = np.where(
        ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 1),
        df["nobori_pace_diff_slope_range_pace"] * (29/30),

        np.where(
            (df["ground_state"] == 2) & (df["race_type"] == 1),
            df["nobori_pace_diff_slope_range_pace"] * (119/120),

            np.where(
                ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 0),
                df["nobori_pace_diff_slope_range_pace"] * (61/60),

                np.where(
                    (df["ground_state"] == 2) & (df["race_type"] == 0),
                    df["nobori_pace_diff_slope_range_pace"] * (81/80),
                    
                    # どの条件にも当てはまらない場合は元の値を保持
                    df["nobori_pace_diff_slope_range_pace"]
                )
            )
        )
    )

    df["start_range_processed_1"] = (((df["start_range"])-360))
    df["start_range_processed_1"] = df["start_range_processed_1"].apply(
        lambda x: x if x < 0 else x*1
    )
    # -4.5 を行う
    df["curve_processed"] = df["curve"] - 4.5
    # +の場合は数値を8倍する
    df["curve_processed"] = df["curve_processed"].apply(
        lambda x: x * 8 if x > 0 else x
    )


    # ペースに関係ある要素は弱体化
    df["nobori_pace_diff_slope_range_groundstate_position"] = np.where(
        ((df['race_position'] == 1) | (df['race_position'] == 2)),
        df["nobori_pace_diff_slope_range_groundstate"] 
        / ((100000 + df["start_range_processed_1"]) / 100000) 
        * ((1000 + df["start_slope"]) / 1000) 
        * ((3000 + df["curve_processed"]) / 3000) 
        / ((df["goal_range_processed_1"] + 40000) / 40000) 
        / ((df["goal_slope"] + 800) / 800) 
        / ((df["place_season_condition_type_categori_processed"] + 300) / 300) 
        / ((df["race_type"] + 599) / 600),  # ここでカンマ

        np.where(
            ((df['race_position'] == 3) | (df['race_position'] == 4)),
            df["nobori_pace_diff_slope_range_groundstate"] 
            * ((100000 + df["start_range_processed_1"]) / 100000) 
            / ((1000 + df["start_slope"]) / 1000) 
            / ((3000 + df["curve_processed"]) / 3000) 
            * ((df["goal_range_processed_1"] + 40000) / 40000) 
            * ((df["goal_slope"] + 800) / 800) 
            * ((df["place_season_condition_type_categori_processed"] + 300) / 300) 
            * ((df["race_type"] + 599) / 600), 

            df["nobori_pace_diff_slope_range_groundstate"] # それ以外の場合は NaN
        )
    )





    # 月を抽出して開催シーズンを判定
    def determine_season_turf(month):
        if 6 <= month <= 8:
            return "1" #"夏開催"
        elif month == 12 or 1 <= month <= 2:
            return "4" #"冬開催"
        elif 3 <= month <= 5:
            return "1" #"春開催"
        elif 9 <= month <= 11:
            return "2" #"秋開催"        
    
    df["season_turf"] = df["date"].dt.month.map(determine_season_turf)
    df["day"] = df["day"].astype(str)

    df["day_season_turf"] =  df["day"] + df["season_turf"]
    df["day_season_turf"] =  df["day_season_turf"].astype(int)
    df["day"] = df["day"].astype(int)

    df["season_turf"] = df["season_turf"].astype(float)
    #umaban

    df["season_turf_condition"] = np.where(
        df["season_turf"] == 1, df["day"],
        np.where(
            df["season_turf"] == 2, (df["day"] + 1.5) * 1.5,
            np.where(
                df["season_turf"] == 3, df["day"] + 3,
                np.where(
                    df["season_turf"] == 4, df["day"] + 4,
                    df["day"]  # それ以外のとき NaN
                )
            )
        )
    )
    df["season_turf_condition"] = df["season_turf_condition"].fillna(7)


    #0,01-0.01,内がマイナス
    df["umaban_processed"] = df["umaban"].apply(
        lambda x: ((x*-1)) if x < 4 else ((x-8)/3)-1
    ).astype(float)
    #0-0.005

    df["umaban_judge"] = (df["umaban"].astype(float)/df["n_horses"].astype(float))-0.55

    #1（奇数）または 0（偶数）
    df.loc[:, "umaban_odd_processed"] = (
        (df["umaban_odd"]-1)
    ).astype(float)

    # 1600で正規化,-0.5 - 1
    df["course_len_processed"] = (df["course_len"] / 1700)-1

    # ,-1.5 - 4
    df["course_len_processed"] = df["course_len_processed"].apply(
        lambda x: x*3 if x <= 0 else x*4
    )
    df["course_len_processed_2"] = ((df["course_len_processed"] + 3)/3)

    df["umaban_processed_2"] = df["umaban_processed"] / df["course_len_processed_2"]
    df["umaban_odd_processed_2"] = df["umaban_odd_processed"] / df["course_len_processed_2"]



    df["first_corner"] = np.where(
        (df["curve_amount"] == 2) | (df["curve_amount"] == 6),
        df["curve_R34"],
        np.where(
            (df["curve_amount"] == 4) | (df["curve_amount"] == 8),
            df["curve_R12"],
            0  # それ以外のとき 0
        )
    )



    # # 内が小さい
    # df["nobori_pace_diff_slope_range_groundstate_position_umaban"] = np.where(
    #     (df["umaban_judge"] < 0),
    #     df["nobori_pace_diff_slope_range_groundstate_position"] /
    #     (
    #         ((df["umaban_processed_2"] + 1000) / 1000)  # 少ないほうがnoboriが増える
    #         * ((df["umaban_odd_processed_2"] + 700) / 700)  # 奇数不利なので分母を増やして総合を減らす
    #         * (((df["start_point"] - 1) + 400) / 400)  # 外枠が有利なので分母を増やして総合を減らす
    #         * ((df["curve_processed"] + 600) / 600)  # ラストカーブきついほど数値が減る
    #         * ((df["last_curve_slope"] + 700) / 700)  # ラストカーブくだりほど数値が減る
    #         * (((df["season_turf_condition"] - 7) + 500) / 500)  # 馬場状態が良いほど数値が減る
    #         * (((df["race_type"] - 0.5) + 500) / 500)  # 芝ほど数値が減る
    #         / (((df["first_corner"] - 100) + 100000) / 100000)  # 最初のコーナーがでかいほど数値が減る
    #     ),

    #     np.where(
    #         (df["umaban_judge"] >= 0),
    #         df["nobori_pace_diff_slope_range_groundstate_position"] /
    #         (
    #             ((df["umaban_processed_2"] + 1000) / 1000)
    #             * ((df["umaban_odd_processed_2"] + 700) / 700)
    #             / (((df["start_point"] - 1) + 400) / 400)  # 外枠が有利
    #             / ((df["curve_processed"] + 600) / 600)
    #             / ((df["last_curve_slope"] + 700) / 700)
    #             / (((df["season_turf_condition"] - 7) + 500) / 500)
    #             / (((df["race_type"] - 0.5) + 500) / 500)
    #             * (((df["first_corner"] - 100) + 100000) / 100000)
    #         ),

    #         df["nobori_pace_diff_slope_range_groundstate_position"]
    #     )
    # )



    df["umaban_processed_abs2"] = df["umaban_processed_2"].abs()

    # 内が小さい,最大50くらいになってしまう
    df["nobori_pace_diff_slope_range_groundstate_position_umaban"] = np.where(
        (df["umaban_judge"] < 0),
        df["nobori_pace_diff_slope_range_groundstate_position"] /
        ((
            ((df["umaban_processed_abs2"]) # 少ないほうがtimeが増える-4.5 から3
            * (
                df["umaban_odd_processed_2"]# 奇数不利なので分母を増やして総合を減らす 1
                    +  (df["start_point"] - 1)# 外枠が有利なので分母を増やして総合を減らす 1
                    +  df["curve_processed"]# ラストカーブきついほど数値が減る4
                    +  df["last_curve_slope"]# ラストカーブくだりほど数値が減る2
                    +  (df["season_turf_condition"] - 7)# 馬場状態が良いほど数値が減る 7-7
                    -  (df["race_type"] - 0.5)*4# 芝ほど数値が減る 2
                    -  ((df["first_corner"] - 100)/50)# 最初のコーナーがでかいほど数値が減る1
            ) 
        ) +3000) / 3000)
        ,
        

        np.where(
            (df["umaban_judge"] >= 0),
            df["nobori_pace_diff_slope_range_groundstate_position"] /
            ((
                ((df["umaban_processed_abs2"]) # 少ないほうがtimeが増える-4.5 から3
                * (
                    df["umaban_odd_processed_2"]# 奇数不利なので分母を増やして総合を減らす 1
                    -  (df["start_point"] - 1)# 外枠が有利なので分母を増やして総合を減らす 1
                    -  df["curve_processed"]# ラストカーブきついほど数値が減る4
                    -  df["last_curve_slope"]# ラストカーブくだりほど数値が減る2
                    -  (df["season_turf_condition"] - 7)# 馬場状態が良いほど数値が減る 7-7
                    +  (df["race_type"] - 0.5)*4# 芝ほど数値が減る 2
                    +  ((df["first_corner"] - 100)/50)# 最初のコーナーがでかいほど数値が減る1
                ) 
            ) + 3000) / 3000),

            df["nobori_pace_diff_slope_range_groundstate_position"]
        )
    )










    # # # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # ## # #
        
    """
    距離指標
    ハイペース+
    ハイローセット	
    レースグレードによる距離のハイペース	
    最初の直線が長いほど	（倍率は下げる）ハイペースになる
    コーナーの数が4以上だと、先行争い諦めることがあるので	若干スローに
    コーナーの数が4以上、直線の合計が1000を超えてくると	若干スローに
    短距離は	基本ハイペース
    最初直線＿上り平坦	スローペース
    最初下り坂	ペースが上がり
        
    12コーナーがきつい	スロー
    コーナーがきつい	スロー
    向正面上り坂	スロー
    タフパック	
    ハイペース	タフ
    コーナー種類	ゆるいと遅くならないのでタフ
    コーナーR	大きいとタフ
    コーナーの数	少ないほうがタフ
    高低差がある	タフ
    馬場状態、天気が悪い	タフ
    芝によって	タフ
    直線合計/コーナー合計	多いほどタフ
    距離	長いほどタフ
    脚質パック	
    季節ごとの馬場状態馬場でも-+補正をいれる	
    スタートが上りorくだり	逃げ先行有利
    偶数ほどよいは先行系	逃げ先行有利
    コーナーまで短いが	逃げ先行有利
        
    4コーナーくだり坂	差し追い込み有利
    ダートの方が	かなり先行優位
    雨	先行有利
    雨のない稍重	差し有利
    内外セット	
    ダートで内枠は不利	外枠
    3,4コーナーが急	圧倒的内枠有利になる
    3,4が下り坂	圧倒的内枠有利になる
    距離が長いほど関係なくなる	関係なくなる
    スタートからコーナーまでの距離が短い	ポジションが取りづらいため、内枠有利特に偶数有利
    スタートが上りorくだり坂	ポジションが取りづらいため、内枠有利特に偶数有利
    コーナーがきついは内枠	内枠
    向正面上り坂は内枠	内枠
    芝スタートだと外が有利	外枠
    芝スタート系は道悪で逆転する	内枠
    """

    # #最大200前後
    # df["course_len_pace_diff"] = df["course_len"] * ((df["pace_diff"] +50)/50)

    # #グレード100前後
    # df["course_len_diff_grade"] = df["course_len_pace_diff"] *  (((df['race_grade']+300)/375))

    # #100前後
    # df["course_len_diff_grade_slope"] = np.where(
    #     (df["season"] == 1) | (df["season"] == 4),
    #     df["course_len_diff_grade"]  *  ((df["goal_slope"] +40)/40),
    #     df["course_len_diff_grade"]  * ((df["goal_slope"] +55)/55)
    # )

    # #最初の直線の長さ、長いほどきつい、50前後くらい
    # df["start_range_processed_2"] = (((df["start_range"])-360)/150)
    # df["start_range_processed_2"] = df["start_range_processed_2"].apply(
    #     lambda x: x if x < 0 else x*0.5
    # )

    # df["course_len_pace_diff_grade_slope_range"] = df["course_len_diff_grade_slope"] *  ((df["start_range_processed_2"]+30)/30)

    # # 条件ごとに処理を適用
    # df["course_len_diff_grade_slope_range_pace"] = np.where(
    #     ((df['race_position'] == 1) | (df['race_position'] == 2)) & (df["pace_diff"] >= 0),
    #     df["course_len_pace_diff_grade_slope_range"] * ((df["pace_diff"] +100)/100),
        
    #     np.where(
    #         ((df['race_position'] == 1) | (df['race_position'] == 2)) & (df["pace_diff"] < 0),
    #         df["course_len_pace_diff_grade_slope_range"] / ((df["pace_diff"] +120)/120),
            
    #         np.where(
    #             ((df['race_position'] == 3) | (df['race_position'] == 4))  & (df["pace_diff"] < 0),
    #             df["course_len_pace_diff_grade_slope_range"]  / ((df["pace_diff"] +160)/160),
                
    #             np.where(
    #                 ((df['race_position'] == 3) | (df['race_position'] == 4)) & (df["pace_diff"] >= 0),
    #                 df["course_len_pace_diff_grade_slope_range"] * ((df["pace_diff"] +120)/120),
    #                 df["course_len_pace_diff_grade_slope_range"]  # どの条件にも当てはまらない場合は元の値を保持
    #             )
    #         )
    #     )
    # )


    # # # -4.5 を行う
    # # df["curve_processed"] = df["curve"] - 4.5
    # # # +の場合は数値を8倍する
    # # df["curve_processed"] = df["curve_processed"].apply(
    # #     lambda x: x * 8 if x > 0 else x
    # # )
    # #12コーナーがきついと、ゆるい、-
    # df["course_len_diff_grade_slope_range_pace_12curve"] = df["course_len_diff_grade_slope_range_pace"] * ((df["curve_processed"] + 100) / 100)

    # #向正面上り坂、ゆるい、-
    # df["course_len_diff_grade_slope_range_pace_12curve_front"] = df["course_len_diff_grade_slope_range_pace_12curve"] / ((df["flont_slope"] + 200) / 200)



    # #最大0.02*n
    # def calculate_course_len_pace_diff(row):
    #     if row["curve_amount"] == 0:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"]
    #     elif row["curve_amount"] <= 2:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * (((row["curve_R34"] + 2000) / 2100))
    #     elif row["curve_amount"] <= 3:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] *(((row["curve_R12"] /2 + row["curve_R34"])+ 2000) / 2100)
    #     elif row["curve_amount"] <= 4:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * ((row["curve_R12"]+ row["curve_R34"]+ 2000) / 2100)
    #     elif row["curve_amount"] <= 5:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"]* ((row["curve_R12"] + (row["curve_R34"]*3/2)+ 2000) / 2100)
    #     elif row["curve_amount"] <= 6:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] *((row["curve_R12"]+ (row["curve_R34"]* 2)+ 2000) / 2100)
    #     elif row["curve_amount"] <= 7:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * (((row["curve_R12"]* 3 / 2) + (row["curve_R34"]* 2)+ 2000) / 2100)
    #     else:  # curve_amount <= 8
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * (((row["curve_R12"]* 2)+(row["curve_R34"] * 2)+ 2000) / 2100)

    # df["course_len_diff_grade_slope_range_pace_12curve_front_R"] = df.apply(calculate_course_len_pace_diff, axis=1)

    # #最大0.09くらい
    # df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] = df["course_len_diff_grade_slope_range_pace_12curve_front_R"] * ((df["height_diff"]+ 15) / 15)


    # # 条件ごとに適用
    # df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate"] = np.where(
    #     ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 1),
    #     df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] + 300,

    #     np.where(
    #         (df["ground_state"] == 2) & (df["race_type"] == 1),
    #         df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] + 120,

    #         np.where(
    #             ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 0),
    #             df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] - 100,

    #             np.where(
    #                 (df["ground_state"] == 2) & (df["race_type"] == 0),
    #                 df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] - 50,
                    
    #                 # どの条件にも当てはまらない場合は元の値を保持
    #                 df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"]
    #             )
    #         )
    #     )
    # )


    # df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place"] = (
    #     df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate"] * ((df["place_season_condition_type_categori_processed"]+5)/5)
    #     )

    # #最大0.05くらい
    # df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight"] = (
    #     df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place"] + (((df["straight_total"]/ df["course_len"])-0.5)*400)
    #     )




    """
    距離指標
    ハイペース+
    ハイローセット	
    レースグレードによる距離のハイペース	
    最初の直線が長いほど	（倍率は下げる）ハイペースになる
    コーナーの数が4以上だと、先行争い諦めることがあるので	若干スローに
    コーナーの数が4以上、直線の合計が1000を超えてくると	若干スローに
    短距離は	基本ハイペース
    最初直線＿上り平坦	スローペース
    最初下り坂	ペースが上がり
        
    12コーナーがきつい	スロー
    コーナーがきつい	スロー
    向正面上り坂	スロー
    タフパック	
    ハイペース	タフ
    コーナー種類	ゆるいと遅くならないのでタフ
    コーナーR	大きいとタフ
    コーナーの数	少ないほうがタフ
    高低差がある	タフ
    馬場状態、天気が悪い	タフ
    芝によって	タフ
    直線合計/コーナー合計	多いほどタフ
    距離	長いほどタフ
    脚質パック	
    季節ごとの馬場状態馬場でも-+補正をいれる	
    スタートが上りorくだり	逃げ先行有利
    偶数ほどよいは先行系	逃げ先行有利
    コーナーまで短いが	逃げ先行有利
        
    4コーナーくだり坂	差し追い込み有利
    ダートの方が	かなり先行優位
    雨	先行有利
    雨のない稍重	差し有利
    内外セット	
    ダートで内枠は不利	外枠
    3,4コーナーが急	圧倒的内枠有利になる
    3,4が下り坂	圧倒的内枠有利になる
    距離が長いほど関係なくなる	関係なくなる
    スタートからコーナーまでの距離が短い	ポジションが取りづらいため、内枠有利特に偶数有利
    スタートが上りorくだり坂	ポジションが取りづらいため、内枠有利特に偶数有利
    コーナーがきついは内枠	内枠
    向正面上り坂は内枠	内枠
    芝スタートだと外が有利	外枠
    芝スタート系は道悪で逆転する	内枠
    """



    #最大200前後1.1倍くらいならok
    df["course_len_pace_diff"] = df["course_len"] * ((df["pace_diff"] +40)/40)

    #グレード100前後
    df["course_len_diff_grade"] = df["course_len_pace_diff"] *  (((df['race_grade']+300)/375))

    #100前後
    df["course_len_diff_grade_slope"] = np.where(
        (df["season"] == 1) | (df["season"] == 4),
        df["course_len_diff_grade"]  *  ((df["goal_slope"] +40)/40),
        df["course_len_diff_grade"]  * ((df["goal_slope"] +55)/55)
    )

    #最初の直線の長さ、長いほどきつい、50前後くらい
    df["start_range_processed_2"] = (((df["start_range"])-360)/150)
    df["start_range_processed_2"] = df["start_range_processed_2"].apply(
        lambda x: x if x < 0 else x*0.5
    )

    df["course_len_pace_diff_grade_slope_range"] = df["course_len_diff_grade_slope"] *  ((df["start_range_processed_2"]+30)/30)

    # 条件ごとに処理を適用
    df["course_len_diff_grade_slope_range_pace"] = np.where(
        ((df['race_position'] == 1) & (df["pace_diff"] >= 0)),
        df["course_len_pace_diff_grade_slope_range"] * ((df["pace_diff"] +80)/80),
        np.where(
             (df['race_position'] == 2) & (df["pace_diff"] >= 0),
            df["course_len_pace_diff_grade_slope_range"] * ((df["pace_diff"] +200)/200),

            np.where(
                ((df['race_position'] == 1) | (df['race_position'] == 2)) & (df["pace_diff"] < 0),
                df["course_len_pace_diff_grade_slope_range"] / ((df["pace_diff"] +100)/100),
                
                np.where(
                    ((df['race_position'] == 3) | (df['race_position'] == 4))  & (df["pace_diff"] < 0),
                    df["course_len_pace_diff_grade_slope_range"]  / ((df["pace_diff"] +300)/300),
                    
                    np.where(
                        ((df['race_position'] == 3) | (df['race_position'] == 4)) & (df["pace_diff"] >= 0),
                        df["course_len_pace_diff_grade_slope_range"] * ((df["pace_diff"] +120)/120),
                        df["course_len_pace_diff_grade_slope_range"]  # どの条件にも当てはまらない場合は元の値を保持
                    )
                )
            )
        )  
    )


    # # -4.5 を行う
    # df["curve_processed"] = df["curve"] - 4.5
    # # +の場合は数値を8倍する
    # df["curve_processed"] = df["curve_processed"].apply(
    #     lambda x: x * 8 if x > 0 else x
    # )
    #12コーナーがきついと、ゆるい、-
    df["course_len_diff_grade_slope_range_pace_12curve"] = df["course_len_diff_grade_slope_range_pace"] * ((df["curve_processed"] + 100) / 100)

    #向正面上り坂、ゆるい、-
    df["course_len_diff_grade_slope_range_pace_12curve_front"] = df["course_len_diff_grade_slope_range_pace_12curve"] / ((df["flont_slope"] + 200) / 200)



    # #最大0.02*n
    # def calculate_course_len_pace_diff(row):
    #     if row["curve_amount"] == 0:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"]
    #     elif row["curve_amount"] <= 2:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * (((row["curve_R34"] + 2000) / 2100))
    #     elif row["curve_amount"] <= 3:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] *(((row["curve_R12"] /2 + row["curve_R34"])+ 2000) / 2100)
    #     elif row["curve_amount"] <= 4:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * ((row["curve_R12"]+ row["curve_R34"]+ 2000) / 2100)
    #     elif row["curve_amount"] <= 5:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"]* ((row["curve_R12"] + (row["curve_R34"]*3/2)+ 2000) / 2100)
    #     elif row["curve_amount"] <= 6:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] *((row["curve_R12"]+ (row["curve_R34"]* 2)+ 2000) / 2100)
    #     elif row["curve_amount"] <= 7:
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * (((row["curve_R12"]* 3 / 2) + (row["curve_R34"]* 2)+ 2000) / 2100)
    #     else:  # curve_amount <= 8
    #         return row["course_len_diff_grade_slope_range_pace_12curve_front"] * (((row["curve_R12"]* 2)+(row["curve_R34"] * 2)+ 2000) / 2100)

    # df["course_len_diff_grade_slope_range_pace_12curve_front_R"] = df.apply(calculate_course_len_pace_diff, axis=1)

    #最大0.09くらい
    df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] = df["course_len_diff_grade_slope_range_pace_12curve_front"] * ((df["height_diff"]+ 12) / 12)


    # 条件ごとに適用
    df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate"] = np.where(
        ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 1),
        df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] + 300,

        np.where(
            (df["ground_state"] == 2) & (df["race_type"] == 1),
            df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] + 120,

            np.where(
                ((df["ground_state"] == 1) | (df["ground_state"] == 3)) & (df["race_type"] == 0),
                df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] - 100,

                np.where(
                    (df["ground_state"] == 2) & (df["race_type"] == 0),
                    df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"] - 50,
                    
                    # どの条件にも当てはまらない場合は元の値を保持
                    df["course_len_diff_grade_slope_range_pace_12curve_front_R_height"]
                )
            )
        )
    )


    df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place"] = (
        df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate"] * ((df["place_season_condition_type_categori_processed"]+3)/3)
        )

    #最大0.05くらい
    df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight"] = (
        df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place"] + (((df["straight_total"]/ df["course_len"])-0.5)*400)
        )


    df["course_len_allfix"] = (
        df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight"] * (((df["season_turf_condition"] - 7) + 100) / 100) 
        )



    # 内が小さい,最大50くらいになってしまう
    df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight"] = np.where(
        (df["umaban_judge"] < 0),
        df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight"] /
        ((
            ((df["umaban_processed_abs2"]) # 少ないほうがtimeが増える-4.5 から3
            * (
                df["umaban_odd_processed_2"]# 奇数不利なので分母を増やして総合を減らす 1
                    +  (df["start_point"] - 1)# 外枠が有利なので分母を増やして総合を減らす 1
                    +  df["curve_processed"]# ラストカーブきついほど数値が減る4
                    +  df["last_curve_slope"]# ラストカーブくだりほど数値が減る2
                    +  (df["season_turf_condition"] - 7)# 馬場状態が良いほど数値が減る 7-7
                    -  (df["race_type"] - 0.5)*4# 芝ほど数値が減る 2
                    -  ((df["first_corner"] - 100)/50)# 最初のコーナーがでかいほど数値が減る1
            ) 
        ) +500) / 500)
        ,
        

        np.where(
            (df["umaban_judge"] >= 0),
            df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight"] /
            ((
                ((df["umaban_processed_abs2"]) # 少ないほうがtimeが増える-4.5 から3
                * (
                    df["umaban_odd_processed_2"]# 奇数不利なので分母を増やして総合を減らす 1
                    -  (df["start_point"] - 1)# 外枠が有利なので分母を増やして総合を減らす 1
                    -  df["curve_processed"]# ラストカーブきついほど数値が減る4
                    -  df["last_curve_slope"]# ラストカーブくだりほど数値が減る2
                    -  (df["season_turf_condition"] - 7)# 馬場状態が良いほど数値が減る 7-7
                    +  (df["race_type"] - 0.5)*4# 芝ほど数値が減る 2
                    +  ((df["first_corner"] - 100)/50)# 最初のコーナーがでかいほど数値が減る1
                ) 
            ) + 500) / 500),

            df["course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight"]
        )
    )







    # NoneをNaNに置き換え
    df = df.where(pd.notnull(df), np.nan)
    # 使用する列を選択
    df = df[
        [
            "horse_id",
            "rank_per_horse",
            "date",
            "rank",
            "prize",
            "rank_diff",
            "umaban",
            "wakuban",
            "weather",
            "race_type",
            "course_len",
            "impost",
            "ground_state",
            "race_class",
            "n_horses",
            "time",
            "time_courselen",
            "nobori",
            "win",
            "rentai",
            "show",
            "place",
            'goal_range', 
            'curve', 
            'goal_slope',
            "goal_range_100",
            "place_course_category",
            "place_course_tough",
            "weight",
            "weight_diff",

            "corner_1_per_horse",
            "corner_2_per_horse",
            "corner_3_per_horse",
            "corner_4_per_horse",
            'race_position',
            'race_grade',
            'race_grade_scaled',
            'pace_diff',
            "pace_category",
            'place_season_condition_type_categori',     
            "course_len_type",
            "course_type",  
            "age_n",
            "umaban_odd",
            "season",
            "place_season",
            "place_season_type",
            "place_season_condition_type",

            "season_turf_condition",
            "curve_amount",
            "start_point",
            "start_range",
            "straight_total",
            "curve_total",
            "curve_R12",
            "curve_R34",
            "height_diff",
            "width",
            "start_slope",
            "flont_slope",
            "first_curve_slope",
            "last_curve_slope",
            "season_turf",
            "day_season_turf",
            "umaban_judge",
            "first_corner",

            "nobori_pace_diff_slope_range_groundstate_position",
            "nobori_pace_diff_slope_range_groundstate_position_umaban",
            # "nobori_pace_diff_grade",
            # "nobori_pace_diff_grade_slope",
            # "nobori_pace_diff_grade_slope_range",
            # "nobori_pace_diff_grade_slope_range_pace",
            # "nobori_pace_diff_grade_slope_range_pace_groundstate",
            # "nobori_pace_diff_grade_curve",
            # "nobori_pace_diff_grade_curveR",
            # "nobori_pace_diff_grade_curveR_height_diff",
            # "nobori_pace_diff_grade_curveR_height_diff_season",
            # "nobori_pace_diff_grade_curveR_height_diff_season_straight",
            # "nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len",
            # "nobori_pace_diff_grade_curveR_height_diff_season_straight_course_len_umaban_odds_curve_slope_start_range_start_slope_corner_flont_point",
            # "course_len_pace_diff",
            # "course_len_diff_grade",
            # "course_len_diff_grade_slope",
            # "course_len_pace_diff_grade_slope_range",
            # "course_len_diff_grade_slope_range_pace",
            # "course_len_diff_grade_slope_range_pace_12curve",
            # "course_len_diff_grade_slope_range_pace_12curve_front",
            # "course_len_diff_grade_slope_range_pace_12curve_front_R",
            # "course_len_diff_grade_slope_range_pace_12curve_front_R_height",
            # "course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate",
            # "course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place",
            # "course_len_diff_grade_slope_range_pace_12curve_front_R_height_groundstate_place_straight",
            "course_len_allfix",
        ] + list(corner_cols.columns) + list(pace_cols.columns)
    ]
    df.to_csv(output_dir / output_filename, sep="\t", index=False)
    return df


    
def process_jockey_leading(
    input_dir: Path = RAWDF_DIR,
    output_dir: Path = OUTPUT_DIR,
    input_filename: str = "jockey_leading.csv",
    output_filename: str = "jockey_leading.csv",
) -> pd.DataFrame:
    """
    未加工の騎手成績テーブルをinput_dirから読み込んで加工し、
    output_dirに保存する関数。
    """
    df = pd.read_csv(input_dir / input_filename, sep="\t")
    df["year"] = df["page_id"].str[:4].astype(int)
    df["n_races"] = df["1着"] + df["2着"] + df["3着"] + df["着外"]
    df["winrate_graded"] = df["重賞_勝利"] / df["重賞_出走"]
    df["winrate_special"] = df["特別_勝利"] / df["特別_出走"]
    df["winrate_ordinal"] = df["平場_勝利"] / df["平場_出走"]
    df["winrate_turf"] = df["芝_勝利"] / df["芝_出走"]
    df["winrate_dirt"] = df["ダート_勝利"] / df["ダート_出走"]
    df.rename(
        columns={
            "順位": "rank",
            "重賞_出走": "n_races_graded",
            "特別_出走": "n_races_special",
            "平場_出走": "n_races_ordinal",
            "芝_出走": "n_races_turf",
            "ダート_出走": "n_races_dirt",
            "勝率": "winrate",
            "連対率": "placerate",
            "複勝率": "showrate",
            "収得賞金(万円)": "prize",
        },
        inplace=True,
    )
    # 使用する列を選択
    df = df[
        [
            "jockey_id",
            "year",
            "rank",
            "n_races",
            "n_races_graded",
            "winrate_graded",
            "n_races_special",
            "winrate_special",
            "n_races_ordinal",
            "winrate_ordinal",
            "n_races_turf",
            "winrate_turf",
            "n_races_dirt",
            "winrate_dirt",
            "winrate",
            "placerate",
            "showrate",
            "prize",
        ]
    ]
    df.to_csv(output_dir / output_filename, sep="\t", index=False)
    return df


def process_trainer_leading(
    input_dir: Path = RAWDF_DIR,
    output_dir: Path = OUTPUT_DIR,
    input_filename: str = "trainer_leading.csv",
    output_filename: str = "trainer_leading.csv",
) -> pd.DataFrame:
    """
    未加工の騎手成績テーブルをinput_dirから読み込んで加工し、output_dirに保存する関数。
    """
    df = pd.read_csv(input_dir / input_filename, sep="\t")
    df["year"] = df["page_id"].str[:4].astype(int)
    df["n_races"] = df["1着"] + df["2着"] + df["3着"] + df["着外"]
    df["winrate_graded"] = df["重賞_勝利"] / df["重賞_出走"]
    df["winrate_special"] = df["特別_勝利"] / df["特別_出走"]
    df["winrate_ordinal"] = df["平場_勝利"] / df["平場_出走"]
    df["winrate_turf"] = df["芝_勝利"] / df["芝_出走"]
    df["winrate_dirt"] = df["ダート_勝利"] / df["ダート_出走"]
    df.rename(
        columns={
            "順位": "rank",
            "重賞_出走": "n_races_graded",
            "特別_出走": "n_races_special",
            "平場_出走": "n_races_ordinal",
            "芝_出走": "n_races_turf",
            "ダート_出走": "n_races_dirt",
            "勝率": "winrate",
            "連対率": "placerate",
            "複勝率": "showrate",
            "収得賞金(万円)": "prize",
        },
        inplace=True,
    )
    # 使用する列を選択
    df = df[
        [
            "trainer_id",
            "year",
            "rank",
            "n_races",
            "n_races_graded",
            "winrate_graded",
            "n_races_special",
            "winrate_special",
            "n_races_ordinal",
            "winrate_ordinal",
            "n_races_turf",
            "winrate_turf",
            "n_races_dirt",
            "winrate_dirt",
            "winrate",
            "placerate",
            "showrate",
            "prize",
        ]
    ]
    df.to_csv(output_dir / output_filename, sep="\t", index=False)
    return df


def process_peds(
    population_dir: Path = POPULATION_DIR,
    populaton_filename: str = "population.csv",
    input_dir: Path = RAWDF_DIR,
    output_dir: Path = OUTPUT_DIR,
    input_filename: str = "peds.csv",
    output_filename: str = "peds.csv",
):
    """
    未加工の血統テーブルをinput_dirから読み込んで加工し、output_dirに保存する関数。
    """
    population = pd.read_csv(population_dir / populaton_filename, sep="\t")
    # df = pd.read_csv(input_dir / input_filename, sep="\t").query(
    #     "horse_id in @population['horse_id']"
    # )
    population_horse_ids = population['horse_id'].tolist()
    
    # クエリでリストを直接使用
    df = pd.read_csv(input_dir / input_filename, sep="\t").query(
        "horse_id in @population_horse_ids"
    )

    
    # 種牡馬とBMSに絞る
    df = df[["horse_id", "ped_0", "ped_32"]]
    df.columns = [["horse_id", "sire_id", "bms_id"]]
    df.to_csv(output_dir / output_filename, sep="\t", index=False)
    return df


def process_sire_leading(
    input_dir: Path = RAWDF_DIR,
    output_dir: Path = OUTPUT_DIR,
    input_filename: str = "sire_leading.csv",
    output_filename: str = "sire_leading.csv",
    race_type_mapping: dict = race_type_mapping,
    id_col: str = "sire_id",
) -> pd.DataFrame:
    """
    未加工の種牡馬リーディングテーブルをinput_dirから読み込んで加工し、
    output_dirに保存する関数。
    """
    df = pd.read_csv(input_dir / input_filename, sep="\t")
    df["year"] = df["page_id"].str[:4].astype(int)
    key_cols = ["page_id", id_col, "year"]
    target_cols = [
        "芝_出走",
        "芝_勝利",
        "ダート_出走",
        "ダート_勝利",
        "平均距離(芝)",
        "平均距離(ダ)",
    ]
    df = df[key_cols + target_cols]
    df = df.melt(
        id_vars=key_cols,
        value_vars=target_cols,
        var_name="category",
        value_name="value",
    )
    splitted_df = (
        df["category"]
        .str.replace("平均距離(芝)", "芝_平均距離")
        .str.replace("平均距離(ダ)", "ダート_平均距離")
        .str.split("_", expand=True)
    )
    df["race_type"] = splitted_df[0]
    df["category"] = splitted_df[1]
    df["race_type"] = df["race_type"].str.replace("ダート", "ダ").map(race_type_mapping)
    df = df.pivot_table(
        index=key_cols + ["race_type"], columns="category", values="value"
    ).reset_index()
    df["winrate"] = df["勝利"] / df["出走"]
    df.rename(
        columns={"出走": "n_races", "勝利": "n_wins", "平均距離": "course_len"},
        inplace=True,
    )
    df.to_csv(output_dir / output_filename, sep="\t", index=False)
    return df
